
Door_Locker_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000252c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  0000252c  000025c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080016c  0080016c  000026cc  2**0
                  ALLOC
  3 .stab         00002c7c  00000000  00000000  000026cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001594  00000000  00000000  00005348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000068dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000adb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000babf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 11 	call	0x2266	; 0x2266 <main>
      8a:	0c 94 94 12 	jmp	0x2528	; 0x2528 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_init+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <UART_init+0x8>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <UART_init+0xa>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	7c 83       	std	Y+4, r23	; 0x04
     ce8:	8d 83       	std	Y+5, r24	; 0x05
     cea:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     cec:	1a 82       	std	Y+2, r1	; 0x02
     cee:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     cf0:	eb e2       	ldi	r30, 0x2B	; 43
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     cf8:	ea e2       	ldi	r30, 0x2A	; 42
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	88 e1       	ldi	r24, 0x18	; 24
     cfe:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     d00:	e0 e4       	ldi	r30, 0x40	; 64
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	86 e8       	ldi	r24, 0x86	; 134
     d06:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	ad 81       	ldd	r26, Y+5	; 0x05
     d0e:	be 81       	ldd	r27, Y+6	; 0x06
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	aa 1f       	adc	r26, r26
     d16:	bb 1f       	adc	r27, r27
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	aa 1f       	adc	r26, r26
     d1e:	bb 1f       	adc	r27, r27
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	aa 1f       	adc	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	9c 01       	movw	r18, r24
     d2a:	ad 01       	movw	r20, r26
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	92 e1       	ldi	r25, 0x12	; 18
     d30:	aa e7       	ldi	r26, 0x7A	; 122
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	bc 01       	movw	r22, r24
     d36:	cd 01       	movw	r24, r26
     d38:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
     d3c:	da 01       	movw	r26, r20
     d3e:	c9 01       	movw	r24, r18
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     d46:	e0 e4       	ldi	r30, 0x40	; 64
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	89 2f       	mov	r24, r25
     d50:	99 27       	eor	r25, r25
     d52:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     d54:	e9 e2       	ldi	r30, 0x29	; 41
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	80 83       	st	Z, r24
}
     d5c:	26 96       	adiw	r28, 0x06	; 6
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     d7a:	eb e2       	ldi	r30, 0x2B	; 43
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	80 72       	andi	r24, 0x20	; 32
     d86:	90 70       	andi	r25, 0x00	; 0
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	b9 f3       	breq	.-18     	; 0xd7a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     d8c:	ec e2       	ldi	r30, 0x2C	; 44
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     da4:	eb e2       	ldi	r30, 0x2B	; 43
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	88 23       	and	r24, r24
     dac:	dc f7       	brge	.-10     	; 0xda4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     dae:	ec e2       	ldi	r30, 0x2C	; 44
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <UART_sendString+0x6>
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	0e c0       	rjmp	.+28     	; 0xdea <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	fc 01       	movw	r30, r24
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	80 81       	ld	r24, Z
     de0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_sendByte>
		i++;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	fc 01       	movw	r30, r24
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	80 81       	ld	r24, Z
     dfc:	88 23       	and	r24, r24
     dfe:	39 f7       	brne	.-50     	; 0xdce <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <UART_receiveString+0xa>
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9b 83       	std	Y+3, r25	; 0x03
     e1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     e20:	19 82       	std	Y+1, r1	; 0x01
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <UART_receiveString+0x36>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		Str[i] = UART_recieveByte();
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	8c 01       	movw	r16, r24
     e30:	02 0f       	add	r16, r18
     e32:	13 1f       	adc	r17, r19
     e34:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_recieveByte>
     e38:	f8 01       	movw	r30, r16
     e3a:	80 83       	st	Z, r24
		i++;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	83 32       	cpi	r24, 0x23	; 35
     e56:	31 f7       	brne	.-52     	; 0xe24 <UART_receiveString+0x18>
		Str[i] = UART_recieveByte();
		i++;
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	fc 01       	movw	r30, r24
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	10 82       	st	Z, r1
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <Timer_init>:

/*-------------------------->Public Functions Definitions<------------------------------*/

/* A function to initialize all timers */
void Timer_init(const TimerConfig*config_Ptr)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <Timer_init+0x6>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01


		if(config_Ptr->mode == NORMAL)
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	09 f5       	brne	.+66     	; 0xed4 <Timer_init+0x5a>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 normal mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (Normal mode)
			 * WGM11:10=0b00              No wave generation (Normal mode)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     e92:	ef e4       	ldi	r30, 0x4F	; 79
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	80 83       	st	Z, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1 = config_Ptr->initialValue;
     e9a:	ac e4       	ldi	r26, 0x4C	; 76
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	92 81       	ldd	r25, Z+2	; 0x02
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	9c 93       	st	X, r25
     eaa:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * TOIE1=1   To enable the overflow interrupt
			 */
			SET_BIT(TIMSK, TOIE1);
     eac:	a9 e5       	ldi	r26, 0x59	; 89
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e9 e5       	ldi	r30, 0x59	; 89
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
			/*
						 * Timer/Counter Control Register1 B (TCCR1B)
						 * CS12:10=config_Ptr->clock   To select the desired prescaler
						 *
						 */
						TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
     eba:	ae e4       	ldi	r26, 0x4E	; 78
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ee e4       	ldi	r30, 0x4E	; 78
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	98 2f       	mov	r25, r24
     ec6:	98 7f       	andi	r25, 0xF8	; 248
     ec8:	e9 81       	ldd	r30, Y+1	; 0x01
     eca:	fa 81       	ldd	r31, Y+2	; 0x02
     ecc:	83 81       	ldd	r24, Z+3	; 0x03
     ece:	89 2b       	or	r24, r25
     ed0:	8c 93       	st	X, r24
     ed2:	35 c0       	rjmp	.+106    	; 0xf3e <Timer_init+0xc4>

		}

		else if(config_Ptr->mode == COMPARE)
     ed4:	e9 81       	ldd	r30, Y+1	; 0x01
     ed6:	fa 81       	ldd	r31, Y+2	; 0x02
     ed8:	80 81       	ld	r24, Z
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	81 f5       	brne	.+96     	; 0xf3e <Timer_init+0xc4>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 compare mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (compare mode)
			 * WGM11:10=0b00              No wave generation (compare mode)
			 */
			TCCR1A = (1<<FOC1A);
     ede:	ef e4       	ldi	r30, 0x4F	; 79
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	88 e0       	ldi	r24, 0x08	; 8
     ee4:	80 83       	st	Z, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1 = config_Ptr->initialValue;
     ee6:	ac e4       	ldi	r26, 0x4C	; 76
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e9 81       	ldd	r30, Y+1	; 0x01
     eec:	fa 81       	ldd	r31, Y+2	; 0x02
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	92 81       	ldd	r25, Z+2	; 0x02
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	9c 93       	st	X, r25
     ef6:	8e 93       	st	-X, r24

			/*
			 * Output Compare Register 1 A OCR1A
			 * OCR1A=config_Ptr->compareValue   To set the compare match value in CTC
			 */
			OCR1A = config_Ptr->compareValue;
     ef8:	aa e4       	ldi	r26, 0x4A	; 74
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 81       	ldd	r30, Y+1	; 0x01
     efe:	fa 81       	ldd	r31, Y+2	; 0x02
     f00:	84 81       	ldd	r24, Z+4	; 0x04
     f02:	95 81       	ldd	r25, Z+5	; 0x05
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	9c 93       	st	X, r25
     f08:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * OCIE1A=1   To enable the Output Compare A match interrupt
			 */
			SET_BIT(TIMSK, OCIE1A);
     f0a:	a9 e5       	ldi	r26, 0x59	; 89
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 e5       	ldi	r30, 0x59	; 89
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	8c 93       	st	X, r24
			/*
						 * Timer/Counter Control Register1 B (TCCR1B)
						 * CS12:10=config_Ptr->clock   To select the desired prescaler
						 * WGM10:13=0100,WGM12=1       To selclet Clear TCNT1 on Compare match mode(CTC mode)
						 */
						TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
     f18:	ae e4       	ldi	r26, 0x4E	; 78
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ee e4       	ldi	r30, 0x4E	; 78
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	98 2f       	mov	r25, r24
     f24:	98 7f       	andi	r25, 0xF8	; 248
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	83 81       	ldd	r24, Z+3	; 0x03
     f2c:	89 2b       	or	r24, r25
     f2e:	8c 93       	st	X, r24
						SET_BIT(TCCR1B, WGM12);
     f30:	ae e4       	ldi	r26, 0x4E	; 78
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ee e4       	ldi	r30, 0x4E	; 78
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	8c 93       	st	X, r24
		}
	}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <Timer_deInit>:

void Timer_deInit(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62


		/* clear all timer1 registers */
		TCCR1A = 0;
     f50:	ef e4       	ldi	r30, 0x4F	; 79
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	10 82       	st	Z, r1
		TCCR1B = 0;
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	10 82       	st	Z, r1
		TCNT1 = 0;
     f5c:	ec e4       	ldi	r30, 0x4C	; 76
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	11 82       	std	Z+1, r1	; 0x01
     f62:	10 82       	st	Z, r1

}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <Timer1_setCallBack>:



void Timer1_setCallBack(void(*a_Ptr)())
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <Timer1_setCallBack+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_Ptr;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	90 93 6d 01 	sts	0x016D, r25
     f80:	80 93 6c 01 	sts	0x016C, r24
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Timer0_PWM_Init>:


/* A function to initialize Timer0 in PWM Mode: */
void Timer0_PWM_Init(uint8 DutyCycle)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	0f 92       	push	r0
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB,PB3);   /* OC0(PB3) is output to generate PWM Signal */
     f9a:	a7 e3       	ldi	r26, 0x37	; 55
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	88 60       	ori	r24, 0x08	; 8
     fa6:	8c 93       	st	X, r24
	/* Timer/Counter0 Control Register TCCR0
	 * WGM01:0=0b11 To select fast PWM mode
	 * COM01:0=0b10 To select PWM non-inverting mode
	 * CS02:0=0b010 To select prescaler=8
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a e6       	ldi	r24, 0x6A	; 106
     fae:	80 83       	st	Z, r24

	TCNT0 = 0;          /* Timer0 initial value=0 */
     fb0:	e2 e5       	ldi	r30, 0x52	; 82
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	10 82       	st	Z, r1
	OCR0 = DutyCycle;   /* Set OCR0 by the desired duty cycle */
     fb6:	ec e5       	ldi	r30, 0x5C	; 92
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 83       	st	Z, r24

 }   /* End Timer0_PWM_Init function */
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)(*g_callBackPtr)();
     ff0:	80 91 6c 01 	lds	r24, 0x016C
     ff4:	90 91 6d 01 	lds	r25, 0x016D
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	29 f0       	breq	.+10     	; 0x1006 <__vector_7+0x40>
     ffc:	e0 91 6c 01 	lds	r30, 0x016C
    1000:	f0 91 6d 01 	lds	r31, 0x016D
    1004:	09 95       	icall
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <TWI_init>:
#include "twi.h"
#include "../../common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1034:	e0 e2       	ldi	r30, 0x20	; 32
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	80 83       	st	Z, r24
	TWSR = 0x00;
    103c:	e1 e2       	ldi	r30, 0x21	; 33
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1042:	e2 e2       	ldi	r30, 0x22	; 34
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    104a:	e6 e5       	ldi	r30, 0x56	; 86
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	84 e0       	ldi	r24, 0x04	; 4
    1050:	80 83       	st	Z, r24
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <TWI_start>:

void TWI_start(void)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1060:	e6 e5       	ldi	r30, 0x56	; 86
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	84 ea       	ldi	r24, 0xA4	; 164
    1066:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	dc f7       	brge	.-10     	; 0x1068 <TWI_start+0x10>
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <TWI_stop>:

void TWI_stop(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1080:	e6 e5       	ldi	r30, 0x56	; 86
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	84 e9       	ldi	r24, 0x94	; 148
    1086:	80 83       	st	Z, r24
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    109a:	e3 e2       	ldi	r30, 0x23	; 35
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    10a2:	e6 e5       	ldi	r30, 0x56	; 86
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	84 e8       	ldi	r24, 0x84	; 132
    10a8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10aa:	e6 e5       	ldi	r30, 0x56	; 86
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	dc f7       	brge	.-10     	; 0x10aa <TWI_writeByte+0x1c>
}
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	84 ec       	ldi	r24, 0xC4	; 196
    10ca:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 23       	and	r24, r24
    10d4:	dc f7       	brge	.-10     	; 0x10cc <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    10d6:	e3 e2       	ldi	r30, 0x23	; 35
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    10ea:	e6 e5       	ldi	r30, 0x56	; 86
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	84 e8       	ldi	r24, 0x84	; 132
    10f0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10f2:	e6 e5       	ldi	r30, 0x56	; 86
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	dc f7       	brge	.-10     	; 0x10f2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    10fc:	e3 e2       	ldi	r30, 0x23	; 35
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1112:	e1 e2       	ldi	r30, 0x21	; 33
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 7f       	andi	r24, 0xF8	; 248
    111a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <GPIO_setupPinDirection+0x6>
    112c:	00 d0       	rcall	.+0      	; 0x112e <GPIO_setupPinDirection+0x8>
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6a 83       	std	Y+2, r22	; 0x02
    1138:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	88 30       	cpi	r24, 0x08	; 8
    113e:	08 f0       	brcs	.+2      	; 0x1142 <GPIO_setupPinDirection+0x1c>
    1140:	d5 c0       	rjmp	.+426    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	08 f0       	brcs	.+2      	; 0x114a <GPIO_setupPinDirection+0x24>
    1148:	d1 c0       	rjmp	.+418    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3d 83       	std	Y+5, r19	; 0x05
    1152:	2c 83       	std	Y+4, r18	; 0x04
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <GPIO_setupPinDirection+0x3a>
    115e:	43 c0       	rjmp	.+134    	; 0x11e6 <GPIO_setupPinDirection+0xc0>
    1160:	2c 81       	ldd	r18, Y+4	; 0x04
    1162:	3d 81       	ldd	r19, Y+5	; 0x05
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <GPIO_setupPinDirection+0x4e>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	71 f0       	breq	.+28     	; 0x118e <GPIO_setupPinDirection+0x68>
    1172:	bc c0       	rjmp	.+376    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_setupPinDirection+0x5a>
    117e:	5f c0       	rjmp	.+190    	; 0x123e <GPIO_setupPinDirection+0x118>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	09 f4       	brne	.+2      	; 0x118c <GPIO_setupPinDirection+0x66>
    118a:	85 c0       	rjmp	.+266    	; 0x1296 <GPIO_setupPinDirection+0x170>
    118c:	af c0       	rjmp	.+350    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a1 f4       	brne	.+40     	; 0x11bc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1194:	aa e3       	ldi	r26, 0x3A	; 58
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ea e3       	ldi	r30, 0x3A	; 58
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_setupPinDirection+0x8c>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_setupPinDirection+0x88>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	98 c0       	rjmp	.+304    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11bc:	aa e3       	ldi	r26, 0x3A	; 58
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0xb4>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0xb0>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	83 c0       	rjmp	.+262    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11ec:	a7 e3       	ldi	r26, 0x37	; 55
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e7 e3       	ldi	r30, 0x37	; 55
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_setupPinDirection+0xe4>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_setupPinDirection+0xe0>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	6c c0       	rjmp	.+216    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1214:	a7 e3       	ldi	r26, 0x37	; 55
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e7 e3       	ldi	r30, 0x37	; 55
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_setupPinDirection+0x10c>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_setupPinDirection+0x108>
    1236:	80 95       	com	r24
    1238:	84 23       	and	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	57 c0       	rjmp	.+174    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1244:	a4 e3       	ldi	r26, 0x34	; 52
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_setupPinDirection+0x13c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_setupPinDirection+0x138>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	40 c0       	rjmp	.+128    	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    126c:	a4 e3       	ldi	r26, 0x34	; 52
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e4 e3       	ldi	r30, 0x34	; 52
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_setupPinDirection+0x164>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_setupPinDirection+0x160>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	2b c0       	rjmp	.+86     	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    129c:	a1 e3       	ldi	r26, 0x31	; 49
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_setupPinDirection+0x194>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_setupPinDirection+0x190>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	14 c0       	rjmp	.+40     	; 0x12ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12c4:	a1 e3       	ldi	r26, 0x31	; 49
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0x1bc>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0x1b8>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <GPIO_writePin+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <GPIO_writePin+0x8>
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	6a 83       	std	Y+2, r22	; 0x02
    130e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	08 f0       	brcs	.+2      	; 0x1318 <GPIO_writePin+0x1c>
    1316:	d5 c0       	rjmp	.+426    	; 0x14c2 <GPIO_writePin+0x1c6>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	08 f0       	brcs	.+2      	; 0x1320 <GPIO_writePin+0x24>
    131e:	d1 c0       	rjmp	.+418    	; 0x14c2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3d 83       	std	Y+5, r19	; 0x05
    1328:	2c 83       	std	Y+4, r18	; 0x04
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <GPIO_writePin+0x3a>
    1334:	43 c0       	rjmp	.+134    	; 0x13bc <GPIO_writePin+0xc0>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <GPIO_writePin+0x4e>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	71 f0       	breq	.+28     	; 0x1364 <GPIO_writePin+0x68>
    1348:	bc c0       	rjmp	.+376    	; 0x14c2 <GPIO_writePin+0x1c6>
    134a:	2c 81       	ldd	r18, Y+4	; 0x04
    134c:	3d 81       	ldd	r19, Y+5	; 0x05
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <GPIO_writePin+0x5a>
    1354:	5f c0       	rjmp	.+190    	; 0x1414 <GPIO_writePin+0x118>
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	9d 81       	ldd	r25, Y+5	; 0x05
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <GPIO_writePin+0x66>
    1360:	85 c0       	rjmp	.+266    	; 0x146c <GPIO_writePin+0x170>
    1362:	af c0       	rjmp	.+350    	; 0x14c2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	a1 f4       	brne	.+40     	; 0x1392 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    136a:	ab e3       	ldi	r26, 0x3B	; 59
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb e3       	ldi	r30, 0x3B	; 59
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_writePin+0x8c>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_writePin+0x88>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	98 c0       	rjmp	.+304    	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1392:	ab e3       	ldi	r26, 0x3B	; 59
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	eb e3       	ldi	r30, 0x3B	; 59
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_writePin+0xb4>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_writePin+0xb0>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	83 c0       	rjmp	.+262    	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	a1 f4       	brne	.+40     	; 0x13ea <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13c2:	a8 e3       	ldi	r26, 0x38	; 56
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e8 e3       	ldi	r30, 0x38	; 56
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <GPIO_writePin+0xe4>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <GPIO_writePin+0xe0>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	6c c0       	rjmp	.+216    	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_writePin+0x10c>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_writePin+0x108>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	57 c0       	rjmp	.+174    	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	a1 f4       	brne	.+40     	; 0x1442 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    141a:	a5 e3       	ldi	r26, 0x35	; 53
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_writePin+0x13c>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_writePin+0x138>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	40 c0       	rjmp	.+128    	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_writePin+0x164>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_writePin+0x160>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	2b c0       	rjmp	.+86     	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	a1 f4       	brne	.+40     	; 0x149a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1472:	a2 e3       	ldi	r26, 0x32	; 50
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e2 e3       	ldi	r30, 0x32	; 50
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_writePin+0x194>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_writePin+0x190>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    149a:	a2 e3       	ldi	r26, 0x32	; 50
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e2 e3       	ldi	r30, 0x32	; 50
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0x1bc>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0x1b8>
    14bc:	80 95       	com	r24
    14be:	84 23       	and	r24, r20
    14c0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <GPIO_readPin+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <GPIO_readPin+0x8>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14e4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	88 30       	cpi	r24, 0x08	; 8
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <GPIO_readPin+0x1c>
    14ec:	84 c0       	rjmp	.+264    	; 0x15f6 <GPIO_readPin+0x124>
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <GPIO_readPin+0x24>
    14f4:	80 c0       	rjmp	.+256    	; 0x15f6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3d 83       	std	Y+5, r19	; 0x05
    14fe:	2c 83       	std	Y+4, r18	; 0x04
    1500:	4c 81       	ldd	r20, Y+4	; 0x04
    1502:	5d 81       	ldd	r21, Y+5	; 0x05
    1504:	41 30       	cpi	r20, 0x01	; 1
    1506:	51 05       	cpc	r21, r1
    1508:	79 f1       	breq	.+94     	; 0x1568 <GPIO_readPin+0x96>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	91 05       	cpc	r25, r1
    1512:	34 f4       	brge	.+12     	; 0x1520 <GPIO_readPin+0x4e>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	21 15       	cp	r18, r1
    151a:	31 05       	cpc	r19, r1
    151c:	69 f0       	breq	.+26     	; 0x1538 <GPIO_readPin+0x66>
    151e:	6b c0       	rjmp	.+214    	; 0x15f6 <GPIO_readPin+0x124>
    1520:	4c 81       	ldd	r20, Y+4	; 0x04
    1522:	5d 81       	ldd	r21, Y+5	; 0x05
    1524:	42 30       	cpi	r20, 0x02	; 2
    1526:	51 05       	cpc	r21, r1
    1528:	b9 f1       	breq	.+110    	; 0x1598 <GPIO_readPin+0xc6>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <GPIO_readPin+0x64>
    1534:	49 c0       	rjmp	.+146    	; 0x15c8 <GPIO_readPin+0xf6>
    1536:	5f c0       	rjmp	.+190    	; 0x15f6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1538:	e9 e3       	ldi	r30, 0x39	; 57
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_readPin+0x7e>
    154c:	55 95       	asr	r21
    154e:	47 95       	ror	r20
    1550:	8a 95       	dec	r24
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_readPin+0x7a>
    1554:	ca 01       	movw	r24, r20
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	90 70       	andi	r25, 0x00	; 0
    155a:	88 23       	and	r24, r24
    155c:	19 f0       	breq	.+6      	; 0x1564 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	49 c0       	rjmp	.+146    	; 0x15f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	47 c0       	rjmp	.+142    	; 0x15f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1568:	e6 e3       	ldi	r30, 0x36	; 54
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_readPin+0xae>
    157c:	55 95       	asr	r21
    157e:	47 95       	ror	r20
    1580:	8a 95       	dec	r24
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_readPin+0xaa>
    1584:	ca 01       	movw	r24, r20
    1586:	81 70       	andi	r24, 0x01	; 1
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	88 23       	and	r24, r24
    158c:	19 f0       	breq	.+6      	; 0x1594 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	31 c0       	rjmp	.+98     	; 0x15f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1594:	19 82       	std	Y+1, r1	; 0x01
    1596:	2f c0       	rjmp	.+94     	; 0x15f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1598:	e3 e3       	ldi	r30, 0x33	; 51
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_readPin+0xde>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_readPin+0xda>
    15b4:	ca 01       	movw	r24, r20
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	88 23       	and	r24, r24
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	19 c0       	rjmp	.+50     	; 0x15f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	17 c0       	rjmp	.+46     	; 0x15f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15c8:	e0 e3       	ldi	r30, 0x30	; 48
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_readPin+0x10e>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_readPin+0x10a>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <GPIO_setupPortDirection+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <GPIO_setupPortDirection+0x8>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	90 f5       	brcc	.+100    	; 0x1682 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3c 83       	std	Y+4, r19	; 0x04
    1626:	2b 83       	std	Y+3, r18	; 0x03
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	d1 f0       	breq	.+52     	; 0x1666 <GPIO_setupPortDirection+0x5e>
    1632:	2b 81       	ldd	r18, Y+3	; 0x03
    1634:	3c 81       	ldd	r19, Y+4	; 0x04
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	2c f4       	brge	.+10     	; 0x1646 <GPIO_setupPortDirection+0x3e>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 f0       	breq	.+24     	; 0x165c <GPIO_setupPortDirection+0x54>
    1644:	1e c0       	rjmp	.+60     	; 0x1682 <GPIO_setupPortDirection+0x7a>
    1646:	2b 81       	ldd	r18, Y+3	; 0x03
    1648:	3c 81       	ldd	r19, Y+4	; 0x04
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_setupPortDirection+0x68>
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <GPIO_setupPortDirection+0x72>
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    165c:	ea e3       	ldi	r30, 0x3A	; 58
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1666:	e7 e3       	ldi	r30, 0x37	; 55
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1670:	e4 e3       	ldi	r30, 0x34	; 52
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
			break;
		}
	}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <GPIO_writePort+0x6>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <GPIO_writePort+0x8>
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	90 f5       	brcc	.+100    	; 0x170a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	d1 f0       	breq	.+52     	; 0x16ee <GPIO_writePort+0x5e>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <GPIO_writePort+0x3e>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <GPIO_writePort+0x54>
    16cc:	1e c0       	rjmp	.+60     	; 0x170a <GPIO_writePort+0x7a>
    16ce:	2b 81       	ldd	r18, Y+3	; 0x03
    16d0:	3c 81       	ldd	r19, Y+4	; 0x04
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <GPIO_writePort+0x68>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <GPIO_writePort+0x72>
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16e4:	eb e3       	ldi	r30, 0x3B	; 59
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	80 83       	st	Z, r24
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	80 83       	st	Z, r24
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
    1700:	04 c0       	rjmp	.+8      	; 0x170a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1702:	e2 e3       	ldi	r30, 0x32	; 50
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
			break;
		}
	}
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <GPIO_readPort+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <GPIO_readPort+0x8>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1726:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	90 f5       	brcc	.+100    	; 0x1792 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3c 83       	std	Y+4, r19	; 0x04
    1736:	2b 83       	std	Y+3, r18	; 0x03
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	d1 f0       	breq	.+52     	; 0x1776 <GPIO_readPort+0x5e>
    1742:	2b 81       	ldd	r18, Y+3	; 0x03
    1744:	3c 81       	ldd	r19, Y+4	; 0x04
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <GPIO_readPort+0x3e>
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	61 f0       	breq	.+24     	; 0x176c <GPIO_readPort+0x54>
    1754:	1e c0       	rjmp	.+60     	; 0x1792 <GPIO_readPort+0x7a>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <GPIO_readPort+0x68>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <GPIO_readPort+0x72>
    176a:	13 c0       	rjmp	.+38     	; 0x1792 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    176c:	e9 e3       	ldi	r30, 0x39	; 57
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	0e c0       	rjmp	.+28     	; 0x1792 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1776:	e6 e3       	ldi	r30, 0x36	; 54
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	09 c0       	rjmp	.+18     	; 0x1792 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1780:	e3 e3       	ldi	r30, 0x33	; 51
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    178a:	e0 e3       	ldi	r30, 0x30	; 48
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DcMotor_Init>:
#include  "motor.h"



void DcMotor_Init(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(MOTOR_EN_PORT ,MOTOR_EN_PIN ,PIN_OUTPUT);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	63 e0       	ldi	r22, 0x03	; 3
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN1_PORT ,MOTOR_IN1_PIN ,PIN_OUTPUT);
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	64 e0       	ldi	r22, 0x04	; 4
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT ,MOTOR_IN2_PIN ,PIN_OUTPUT);
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	65 e0       	ldi	r22, 0x05	; 5
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPinDirection>

}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <DcMotor_Rotate+0x6>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <DcMotor_Rotate+0x8>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3c 83       	std	Y+4, r19	; 0x04
    17e6:	2b 83       	std	Y+3, r18	; 0x03
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	a1 f0       	breq	.+40     	; 0x181a <DcMotor_Rotate+0x4c>
    17f2:	2b 81       	ldd	r18, Y+3	; 0x03
    17f4:	3c 81       	ldd	r19, Y+4	; 0x04
    17f6:	22 30       	cpi	r18, 0x02	; 2
    17f8:	31 05       	cpc	r19, r1
    17fa:	d1 f0       	breq	.+52     	; 0x1830 <DcMotor_Rotate+0x62>
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	01 f5       	brne	.+64     	; 0x1844 <DcMotor_Rotate+0x76>
	{
	case MOTOR_OFF:
		GPIO_writePin(MOTOR_IN1_PORT ,MOTOR_IN1_PIN ,LOGIC_HIGH);
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	64 e0       	ldi	r22, 0x04	; 4
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT ,MOTOR_IN2_PIN ,LOGIC_HIGH);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
    1818:	15 c0       	rjmp	.+42     	; 0x1844 <DcMotor_Rotate+0x76>
		break;
	case MOTOR_ON_CW:
		GPIO_writePin(MOTOR_IN1_PORT ,MOTOR_IN1_PIN ,LOGIC_LOW);
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	64 e0       	ldi	r22, 0x04	; 4
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT ,MOTOR_IN2_PIN ,LOGIC_HIGH);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	65 e0       	ldi	r22, 0x05	; 5
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <DcMotor_Rotate+0x76>
		break;
	case MOTOR_ON_CCW:
		GPIO_writePin(MOTOR_IN1_PORT ,MOTOR_IN1_PIN ,LOGIC_HIGH);
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT ,MOTOR_IN2_PIN ,LOGIC_LOW);
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	65 e0       	ldi	r22, 0x05	; 5
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
		break;
	}
	if(state==MOTOR_ON_CW ||state==MOTOR_ON_CCW  )
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	19 f0       	breq	.+6      	; 0x1850 <DcMotor_Rotate+0x82>
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	e9 f4       	brne	.+58     	; 0x188a <DcMotor_Rotate+0xbc>
	{
	    speed=((uint32)speed*255UL)/100; /* mapping 0->100 duty cycle to be between 0->256*/
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	2f ef       	ldi	r18, 0xFF	; 255
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	24 e6       	ldi	r18, 0x64	; 100
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
    187e:	da 01       	movw	r26, r20
    1880:	c9 01       	movw	r24, r18
    1882:	8a 83       	std	Y+2, r24	; 0x02
	    {
	    	/* do nothing*/
	    }
	    else
	    {
	    Timer0_PWM_Init(speed);
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Timer0_PWM_Init>

	else
	{
		/* do nothing*/
	}
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <EEPROM_writeByte>:
#include "external_eeprom.h"

#include "../../MCAL/I2C/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <EEPROM_writeByte+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <EEPROM_writeByte+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18aa:	0e 94 2c 08 	call	0x1058	; 0x1058 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18ae:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	11 f0       	breq	.+4      	; 0x18ba <EEPROM_writeByte+0x22>
        return ERROR;
    18b6:	1c 82       	std	Y+4, r1	; 0x04
    18b8:	28 c0       	rjmp	.+80     	; 0x190a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	80 70       	andi	r24, 0x00	; 0
    18c0:	97 70       	andi	r25, 0x07	; 7
    18c2:	88 0f       	add	r24, r24
    18c4:	89 2f       	mov	r24, r25
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 0b       	sbc	r25, r25
    18ca:	91 95       	neg	r25
    18cc:	80 6a       	ori	r24, 0xA0	; 160
    18ce:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18d2:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    18d6:	88 31       	cpi	r24, 0x18	; 24
    18d8:	11 f0       	breq	.+4      	; 0x18de <EEPROM_writeByte+0x46>
        return ERROR; 
    18da:	1c 82       	std	Y+4, r1	; 0x04
    18dc:	16 c0       	rjmp	.+44     	; 0x190a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18e4:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    18e8:	88 32       	cpi	r24, 0x28	; 40
    18ea:	11 f0       	breq	.+4      	; 0x18f0 <EEPROM_writeByte+0x58>
        return ERROR;
    18ec:	1c 82       	std	Y+4, r1	; 0x04
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18f6:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    18fa:	88 32       	cpi	r24, 0x28	; 40
    18fc:	11 f0       	breq	.+4      	; 0x1902 <EEPROM_writeByte+0x6a>
        return ERROR;
    18fe:	1c 82       	std	Y+4, r1	; 0x04
    1900:	04 c0       	rjmp	.+8      	; 0x190a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1902:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_stop>
	
    return SUCCESS;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	8c 83       	std	Y+4, r24	; 0x04
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <EEPROM_readByte+0x6>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <EEPROM_readByte+0x8>
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	7c 83       	std	Y+4, r23	; 0x04
    192e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1930:	0e 94 2c 08 	call	0x1058	; 0x1058 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1934:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    1938:	88 30       	cpi	r24, 0x08	; 8
    193a:	11 f0       	breq	.+4      	; 0x1940 <EEPROM_readByte+0x26>
        return ERROR;
    193c:	1d 82       	std	Y+5, r1	; 0x05
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	80 70       	andi	r24, 0x00	; 0
    1946:	97 70       	andi	r25, 0x07	; 7
    1948:	88 0f       	add	r24, r24
    194a:	89 2f       	mov	r24, r25
    194c:	88 1f       	adc	r24, r24
    194e:	99 0b       	sbc	r25, r25
    1950:	91 95       	neg	r25
    1952:	80 6a       	ori	r24, 0xA0	; 160
    1954:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1958:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    195c:	88 31       	cpi	r24, 0x18	; 24
    195e:	11 f0       	breq	.+4      	; 0x1964 <EEPROM_readByte+0x4a>
        return ERROR;
    1960:	1d 82       	std	Y+5, r1	; 0x05
    1962:	32 c0       	rjmp	.+100    	; 0x19c8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    196a:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    196e:	88 32       	cpi	r24, 0x28	; 40
    1970:	11 f0       	breq	.+4      	; 0x1976 <EEPROM_readByte+0x5c>
        return ERROR;
    1972:	1d 82       	std	Y+5, r1	; 0x05
    1974:	29 c0       	rjmp	.+82     	; 0x19c8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1976:	0e 94 2c 08 	call	0x1058	; 0x1058 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    197a:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    197e:	80 31       	cpi	r24, 0x10	; 16
    1980:	11 f0       	breq	.+4      	; 0x1986 <EEPROM_readByte+0x6c>
        return ERROR;
    1982:	1d 82       	std	Y+5, r1	; 0x05
    1984:	21 c0       	rjmp	.+66     	; 0x19c8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	80 70       	andi	r24, 0x00	; 0
    198c:	97 70       	andi	r25, 0x07	; 7
    198e:	88 0f       	add	r24, r24
    1990:	89 2f       	mov	r24, r25
    1992:	88 1f       	adc	r24, r24
    1994:	99 0b       	sbc	r25, r25
    1996:	91 95       	neg	r25
    1998:	81 6a       	ori	r24, 0xA1	; 161
    199a:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    199e:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    19a2:	80 34       	cpi	r24, 0x40	; 64
    19a4:	11 f0       	breq	.+4      	; 0x19aa <EEPROM_readByte+0x90>
        return ERROR;
    19a6:	1d 82       	std	Y+5, r1	; 0x05
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    19aa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_readByteWithNACK>
    19ae:	eb 81       	ldd	r30, Y+3	; 0x03
    19b0:	fc 81       	ldd	r31, Y+4	; 0x04
    19b2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    19b4:	0e 94 84 08 	call	0x1108	; 0x1108 <TWI_getStatus>
    19b8:	88 35       	cpi	r24, 0x58	; 88
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <EEPROM_readByte+0xa6>
        return ERROR;
    19bc:	1d 82       	std	Y+5, r1	; 0x05
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    19c0:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_stop>

    return SUCCESS;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <buzzerInit>:
#include "../../std_types.h"
#include "../../MCAL/GPIO/gpio.h"


void buzzerInit(void)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT );
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 93 08 	call	0x1126	; 0x1126 <GPIO_setupPinDirection>

}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <buzzerOn>:

void buzzerOn(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <buzzerOff>:

void buzzerOff(void)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 7e 09 	call	0x12fc	; 0x12fc <GPIO_writePin>
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <appInit>:
#include <avr/io.h>
#include <avr/interrupt.h>


void appInit(void)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Init();
    1a2a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <DcMotor_Init>
	buzzerInit();
    1a2e:	0e 94 ed 0c 	call	0x19da	; 0x19da <buzzerInit>
	UART_init(9600);
    1a32:	60 e8       	ldi	r22, 0x80	; 128
    1a34:	75 e2       	ldi	r23, 0x25	; 37
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_init>
	SREG|=(1<<7);
    1a3e:	af e5       	ldi	r26, 0x5F	; 95
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ef e5       	ldi	r30, 0x5F	; 95
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 68       	ori	r24, 0x80	; 128
    1a4a:	8c 93       	st	X, r24
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <recievePassword>:

void recievePassword(uint8 *newPassword,uint8 length)
{
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <recievePassword+0xa>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <recievePassword+0xc>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9b 83       	std	Y+3, r25	; 0x03
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i=0;i<length;i++)
    1a68:	19 82       	std	Y+1, r1	; 0x01
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <recievePassword+0x38>
	{
		newPassword[i]=UART_recieveByte();
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	8c 01       	movw	r16, r24
    1a78:	02 0f       	add	r16, r18
    1a7a:	13 1f       	adc	r17, r19
    1a7c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_recieveByte>
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
	SREG|=(1<<7);
}

void recievePassword(uint8 *newPassword,uint8 length)
{
	for (uint8 i=0;i<length;i++)
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	99 81       	ldd	r25, Y+1	; 0x01
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	98 17       	cp	r25, r24
    1a90:	68 f3       	brcs	.-38     	; 0x1a6c <recievePassword+0x1a>
	{
		newPassword[i]=UART_recieveByte();
	}


}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <comparePasswords>:

uint8 comparePasswords(uint8 *pass1,uint8 *pass2,uint8 length)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	27 97       	sbiw	r28, 0x07	; 7
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
    1abc:	7e 83       	std	Y+6, r23	; 0x06
    1abe:	6d 83       	std	Y+5, r22	; 0x05
    1ac0:	4f 83       	std	Y+7, r20	; 0x07
	uint8 notMatchFlag=0;
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
	for (uint8 i=0;i<length;i++)
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    1ac6:	19 c0       	rjmp	.+50     	; 0x1afa <comparePasswords+0x56>
		{
			if(pass1[i]==pass2[i])
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e2 0f       	add	r30, r18
    1ad6:	f3 1f       	adc	r31, r19
    1ad8:	40 81       	ld	r20, Z
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	80 81       	ld	r24, Z
    1aec:	48 17       	cp	r20, r24
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <comparePasswords+0x50>
				// save password
			}

			else
			{
				notMatchFlag=1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8a 83       	std	Y+2, r24	; 0x02
}

uint8 comparePasswords(uint8 *pass1,uint8 *pass2,uint8 length)
{
	uint8 notMatchFlag=0;
	for (uint8 i=0;i<length;i++)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	8f 5f       	subi	r24, 0xFF	; 255
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	99 81       	ldd	r25, Y+1	; 0x01
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	98 17       	cp	r25, r24
    1b00:	18 f3       	brcs	.-58     	; 0x1ac8 <comparePasswords+0x24>
			else
			{
				notMatchFlag=1;
			}
		}
	return notMatchFlag;
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b04:	27 96       	adiw	r28, 0x07	; 7
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <savePassword>:

void savePassword (uint8* password,uint8 length,uint16 u16addr)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	65 97       	sbiw	r28, 0x15	; 21
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
    1b2e:	6b 8b       	std	Y+19, r22	; 0x13
    1b30:	5d 8b       	std	Y+21, r21	; 0x15
    1b32:	4c 8b       	std	Y+20, r20	; 0x14

	for(uint8 i=0;i<length;i++)
    1b34:	18 8a       	std	Y+16, r1	; 0x10
    1b36:	8b c0       	rjmp	.+278    	; 0x1c4e <savePassword+0x138>
	{
		uint8 status=EEPROM_writeByte(u16addr+i,password[i]);
    1b38:	88 89       	ldd	r24, Y+16	; 0x10
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1b40:	9d 89       	ldd	r25, Y+21	; 0x15
    1b42:	a9 01       	movw	r20, r18
    1b44:	48 0f       	add	r20, r24
    1b46:	59 1f       	adc	r21, r25
    1b48:	88 89       	ldd	r24, Y+16	; 0x10
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	9a 89       	ldd	r25, Y+18	; 0x12
    1b52:	fc 01       	movw	r30, r24
    1b54:	e2 0f       	add	r30, r18
    1b56:	f3 1f       	adc	r31, r19
    1b58:	20 81       	ld	r18, Z
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	62 2f       	mov	r22, r18
    1b5e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <EEPROM_writeByte>
    1b62:	8f 87       	std	Y+15, r24	; 0x0f
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e2       	ldi	r26, 0x20	; 32
    1b6a:	b1 e4       	ldi	r27, 0x41	; 65
    1b6c:	8b 87       	std	Y+11, r24	; 0x0b
    1b6e:	9c 87       	std	Y+12, r25	; 0x0c
    1b70:	ad 87       	std	Y+13, r26	; 0x0d
    1b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8f 83       	std	Y+7, r24	; 0x07
    1b8e:	98 87       	std	Y+8, r25	; 0x08
    1b90:	a9 87       	std	Y+9, r26	; 0x09
    1b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <savePassword+0xa0>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <savePassword+0x11e>
	else if (__tmp > 65535)
    1bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb8:	78 85       	ldd	r23, Y+8	; 0x08
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <savePassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <savePassword+0x100>
    1bf8:	88 ec       	ldi	r24, 0xC8	; 200
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <savePassword+0xee>
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <savePassword+0xe2>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <savePassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <savePassword+0x12a>
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
}

void savePassword (uint8* password,uint8 length,uint16 u16addr)
{

	for(uint8 i=0;i<length;i++)
    1c48:	88 89       	ldd	r24, Y+16	; 0x10
    1c4a:	8f 5f       	subi	r24, 0xFF	; 255
    1c4c:	88 8b       	std	Y+16, r24	; 0x10
    1c4e:	98 89       	ldd	r25, Y+16	; 0x10
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	98 17       	cp	r25, r24
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <savePassword+0x142>
    1c56:	70 cf       	rjmp	.-288    	; 0x1b38 <savePassword+0x22>
	{
		uint8 status=EEPROM_writeByte(u16addr+i,password[i]);
		_delay_ms(10);
	}

}
    1c58:	65 96       	adiw	r28, 0x15	; 21
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <triggerBuzzerAlarm>:


void triggerBuzzerAlarm(uint32 alarmTime)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	62 97       	sbiw	r28, 0x12	; 18
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	6f 87       	std	Y+15, r22	; 0x0f
    1c80:	78 8b       	std	Y+16, r23	; 0x10
    1c82:	89 8b       	std	Y+17, r24	; 0x11
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
	buzzerOn();
    1c86:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <buzzerOn>
	_delay_ms(alarmTime*1000);
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	98 89       	ldd	r25, Y+16	; 0x10
    1c8e:	a9 89       	ldd	r26, Y+17	; 0x11
    1c90:	ba 89       	ldd	r27, Y+18	; 0x12
    1c92:	28 ee       	ldi	r18, 0xE8	; 232
    1c94:	33 e0       	ldi	r19, 0x03	; 3
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <triggerBuzzerAlarm+0x92>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <triggerBuzzerAlarm+0x110>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <triggerBuzzerAlarm+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <triggerBuzzerAlarm+0xf2>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <triggerBuzzerAlarm+0xe0>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <triggerBuzzerAlarm+0xd4>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <triggerBuzzerAlarm+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <triggerBuzzerAlarm+0x11c>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	buzzerOff();
    1d8e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <buzzerOff>
}
    1d92:	62 96       	adiw	r28, 0x12	; 18
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <doorOpenSequence>:

void doorOpenSequence(void)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	aa 97       	sbiw	r28, 0x2a	; 42
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Rotate(MOTOR_ON_CW,75);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	6b e4       	ldi	r22, 0x4B	; 75
    1dbc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <DcMotor_Rotate>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	90 e4       	ldi	r25, 0x40	; 64
    1dc4:	ac e9       	ldi	r26, 0x9C	; 156
    1dc6:	b5 e4       	ldi	r27, 0x45	; 69
    1dc8:	8f a3       	std	Y+39, r24	; 0x27
    1dca:	98 a7       	std	Y+40, r25	; 0x28
    1dcc:	a9 a7       	std	Y+41, r26	; 0x29
    1dce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	4a ef       	ldi	r20, 0xFA	; 250
    1dde:	54 e4       	ldi	r21, 0x44	; 68
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	8b a3       	std	Y+35, r24	; 0x23
    1dea:	9c a3       	std	Y+36, r25	; 0x24
    1dec:	ad a3       	std	Y+37, r26	; 0x25
    1dee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df0:	6b a1       	ldd	r22, Y+35	; 0x23
    1df2:	7c a1       	ldd	r23, Y+36	; 0x24
    1df4:	8d a1       	ldd	r24, Y+37	; 0x25
    1df6:	9e a1       	ldd	r25, Y+38	; 0x26
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e04:	88 23       	and	r24, r24
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <doorOpenSequence+0x6e>
		__ticks = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9a a3       	std	Y+34, r25	; 0x22
    1e0e:	89 a3       	std	Y+33, r24	; 0x21
    1e10:	3f c0       	rjmp	.+126    	; 0x1e90 <doorOpenSequence+0xec>
	else if (__tmp > 65535)
    1e12:	6b a1       	ldd	r22, Y+35	; 0x23
    1e14:	7c a1       	ldd	r23, Y+36	; 0x24
    1e16:	8d a1       	ldd	r24, Y+37	; 0x25
    1e18:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	3f ef       	ldi	r19, 0xFF	; 255
    1e1e:	4f e7       	ldi	r20, 0x7F	; 127
    1e20:	57 e4       	ldi	r21, 0x47	; 71
    1e22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	4c f5       	brge	.+82     	; 0x1e7c <doorOpenSequence+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9a a3       	std	Y+34, r25	; 0x22
    1e50:	89 a3       	std	Y+33, r24	; 0x21
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <doorOpenSequence+0xce>
    1e54:	88 ec       	ldi	r24, 0xC8	; 200
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	98 a3       	std	Y+32, r25	; 0x20
    1e5a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e5e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <doorOpenSequence+0xbc>
    1e64:	98 a3       	std	Y+32, r25	; 0x20
    1e66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	9a a3       	std	Y+34, r25	; 0x22
    1e70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e72:	89 a1       	ldd	r24, Y+33	; 0x21
    1e74:	9a a1       	ldd	r25, Y+34	; 0x22
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <doorOpenSequence+0xb0>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <doorOpenSequence+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e80:	8d a1       	ldd	r24, Y+37	; 0x25
    1e82:	9e a1       	ldd	r25, Y+38	; 0x26
    1e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	9a a3       	std	Y+34, r25	; 0x22
    1e8e:	89 a3       	std	Y+33, r24	; 0x21
    1e90:	89 a1       	ldd	r24, Y+33	; 0x21
    1e92:	9a a1       	ldd	r25, Y+34	; 0x22
    1e94:	9e 8f       	std	Y+30, r25	; 0x1e
    1e96:	8d 8f       	std	Y+29, r24	; 0x1d
    1e98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <doorOpenSequence+0xf8>
    1ea0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5000);
	DcMotor_Rotate(MOTOR_OFF,0);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <DcMotor_Rotate>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e4       	ldi	r25, 0x40	; 64
    1eb0:	ac e9       	ldi	r26, 0x9C	; 156
    1eb2:	b5 e4       	ldi	r27, 0x45	; 69
    1eb4:	89 8f       	std	Y+25, r24	; 0x19
    1eb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8d 8b       	std	Y+21, r24	; 0x15
    1ed6:	9e 8b       	std	Y+22, r25	; 0x16
    1ed8:	af 8b       	std	Y+23, r26	; 0x17
    1eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <doorOpenSequence+0x15a>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <doorOpenSequence+0x1d8>
	else if (__tmp > 65535)
    1efe:	6d 89       	ldd	r22, Y+21	; 0x15
    1f00:	7e 89       	ldd	r23, Y+22	; 0x16
    1f02:	8f 89       	ldd	r24, Y+23	; 0x17
    1f04:	98 8d       	ldd	r25, Y+24	; 0x18
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <doorOpenSequence+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	69 8d       	ldd	r22, Y+25	; 0x19
    1f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9c 8b       	std	Y+20, r25	; 0x14
    1f3c:	8b 8b       	std	Y+19, r24	; 0x13
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <doorOpenSequence+0x1ba>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
    1f48:	89 89       	ldd	r24, Y+17	; 0x11
    1f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <doorOpenSequence+0x1a8>
    1f50:	9a 8b       	std	Y+18, r25	; 0x12
    1f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <doorOpenSequence+0x19c>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <doorOpenSequence+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9c 8b       	std	Y+20, r25	; 0x14
    1f7a:	8b 8b       	std	Y+19, r24	; 0x13
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	98 89       	ldd	r25, Y+16	; 0x10
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <doorOpenSequence+0x1e4>
    1f8c:	98 8b       	std	Y+16, r25	; 0x10
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5000);
	DcMotor_Rotate(MOTOR_ON_CCW,75);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	6b e4       	ldi	r22, 0x4B	; 75
    1f94:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <DcMotor_Rotate>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e4       	ldi	r25, 0x40	; 64
    1f9c:	ac e9       	ldi	r26, 0x9C	; 156
    1f9e:	b5 e4       	ldi	r27, 0x45	; 69
    1fa0:	8b 87       	std	Y+11, r24	; 0x0b
    1fa2:	9c 87       	std	Y+12, r25	; 0x0c
    1fa4:	ad 87       	std	Y+13, r26	; 0x0d
    1fa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
    1fc2:	98 87       	std	Y+8, r25	; 0x08
    1fc4:	a9 87       	std	Y+9, r26	; 0x09
    1fc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fca:	78 85       	ldd	r23, Y+8	; 0x08
    1fcc:	89 85       	ldd	r24, Y+9	; 0x09
    1fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <doorOpenSequence+0x246>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <doorOpenSequence+0x2c4>
	else if (__tmp > 65535)
    1fea:	6f 81       	ldd	r22, Y+7	; 0x07
    1fec:	78 85       	ldd	r23, Y+8	; 0x08
    1fee:	89 85       	ldd	r24, Y+9	; 0x09
    1ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <doorOpenSequence+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	6b 85       	ldd	r22, Y+11	; 0x0b
    2004:	7c 85       	ldd	r23, Y+12	; 0x0c
    2006:	8d 85       	ldd	r24, Y+13	; 0x0d
    2008:	9e 85       	ldd	r25, Y+14	; 0x0e
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	0f c0       	rjmp	.+30     	; 0x204a <doorOpenSequence+0x2a6>
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <doorOpenSequence+0x294>
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <doorOpenSequence+0x288>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <doorOpenSequence+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <doorOpenSequence+0x2d0>
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	DcMotor_Rotate(MOTOR_OFF,0);
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <DcMotor_Rotate>
}
    2084:	aa 96       	adiw	r28, 0x2a	; 42
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <sendInterfaceOrder>:

void sendInterfaceOrder(uint8 order)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	0f 92       	push	r0
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(order);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_sendByte>
}
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <recieveInterfaceStatus>:

uint8 recieveInterfaceStatus (void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	uint8 recievedStatus=  UART_recieveByte();
    20ba:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_recieveByte>
    20be:	89 83       	std	Y+1, r24	; 0x01
	return recievedStatus;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <recieveUserRequest>:

uint8 recieveUserRequest(void)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	uint8 request=  UART_recieveByte();
    20d4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_recieveByte>
    20d8:	89 83       	std	Y+1, r24	; 0x01
	return request;
    20da:	89 81       	ldd	r24, Y+1	; 0x01
}
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <getAccessPassword>:

void getAccessPassword(uint8* password,uint8 length,uint16 u16addr)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	65 97       	sbiw	r28, 0x15	; 21
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	9a 8b       	std	Y+18, r25	; 0x12
    20fa:	89 8b       	std	Y+17, r24	; 0x11
    20fc:	6b 8b       	std	Y+19, r22	; 0x13
    20fe:	5d 8b       	std	Y+21, r21	; 0x15
    2100:	4c 8b       	std	Y+20, r20	; 0x14
	for(uint8 i=0;i<length;i++)
    2102:	18 8a       	std	Y+16, r1	; 0x10
    2104:	89 c0       	rjmp	.+274    	; 0x2218 <getAccessPassword+0x134>
		{
			uint8 status=EEPROM_readByte(u16addr+i,&password[i]);
    2106:	88 89       	ldd	r24, Y+16	; 0x10
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	8c 89       	ldd	r24, Y+20	; 0x14
    210e:	9d 89       	ldd	r25, Y+21	; 0x15
    2110:	a9 01       	movw	r20, r18
    2112:	48 0f       	add	r20, r24
    2114:	59 1f       	adc	r21, r25
    2116:	88 89       	ldd	r24, Y+16	; 0x10
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	89 89       	ldd	r24, Y+17	; 0x11
    211e:	9a 89       	ldd	r25, Y+18	; 0x12
    2120:	28 0f       	add	r18, r24
    2122:	39 1f       	adc	r19, r25
    2124:	ca 01       	movw	r24, r20
    2126:	b9 01       	movw	r22, r18
    2128:	0e 94 8d 0c 	call	0x191a	; 0x191a <EEPROM_readByte>
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e2       	ldi	r26, 0x20	; 32
    2134:	b1 e4       	ldi	r27, 0x41	; 65
    2136:	8b 87       	std	Y+11, r24	; 0x0b
    2138:	9c 87       	std	Y+12, r25	; 0x0c
    213a:	ad 87       	std	Y+13, r26	; 0x0d
    213c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8f 83       	std	Y+7, r24	; 0x07
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	a9 87       	std	Y+9, r26	; 0x09
    215c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <getAccessPassword+0x9c>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <getAccessPassword+0x11a>
	else if (__tmp > 65535)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <getAccessPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <getAccessPassword+0xfc>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <getAccessPassword+0xea>
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <getAccessPassword+0xde>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <getAccessPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <getAccessPassword+0x126>
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	return request;
}

void getAccessPassword(uint8* password,uint8 length,uint16 u16addr)
{
	for(uint8 i=0;i<length;i++)
    2212:	88 89       	ldd	r24, Y+16	; 0x10
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	88 8b       	std	Y+16, r24	; 0x10
    2218:	98 89       	ldd	r25, Y+16	; 0x10
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	98 17       	cp	r25, r24
    221e:	08 f4       	brcc	.+2      	; 0x2222 <getAccessPassword+0x13e>
    2220:	72 cf       	rjmp	.-284    	; 0x2106 <getAccessPassword+0x22>
		{
			uint8 status=EEPROM_readByte(u16addr+i,&password[i]);
			_delay_ms(10);

		}
}
    2222:	65 96       	adiw	r28, 0x15	; 21
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <waitForHMI>:

void waitForHMI(void)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	uint8 status=  UART_recieveByte();
    223e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_recieveByte>
    2242:	89 83       	std	Y+1, r24	; 0x01
}
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <sendControllerStatus>:

void sendControllerStatus(uint8 status)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(status);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_sendByte>
}
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <main>:




int main()
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
	 appInit();
    226e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <appInit>
	 while(1)
	 {

		if (userRequest==CHANGE_PASSWORD_REQ_ID)
    2272:	80 91 6a 01 	lds	r24, 0x016A
    2276:	88 34       	cpi	r24, 0x48	; 72
    2278:	09 f0       	breq	.+2      	; 0x227c <main+0x16>
    227a:	79 c0       	rjmp	.+242    	; 0x236e <main+0x108>
		{
            if(firstpasswordFlag==0)
    227c:	80 91 69 01 	lds	r24, 0x0169
    2280:	88 23       	and	r24, r24
    2282:	a9 f5       	brne	.+106    	; 0x22ee <main+0x88>
            {

            	passwordStatus=NOT_MATCH;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	80 93 68 01 	sts	0x0168, r24
    228a:	2d c0       	rjmp	.+90     	; 0x22e6 <main+0x80>
            	while(passwordStatus==NOT_MATCH)
            	{
            	waitForHMI();
    228c:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
            	sendInterfaceOrder(GET_ENTERED_PASSWORD);
    2290:	89 e4       	ldi	r24, 0x49	; 73
    2292:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>

            	sendControllerStatus(CONTROL_WAITING );
    2296:	81 e5       	ldi	r24, 0x51	; 81
    2298:	0e 94 26 11 	call	0x224c	; 0x224c <sendControllerStatus>
            	recievePassword(entertedPassword,PASSWORD_LENGTH );
    229c:	83 e7       	ldi	r24, 0x73	; 115
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	65 e0       	ldi	r22, 0x05	; 5
    22a2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <recievePassword>
            	getAccessPassword(accessPassword,PASSWORD_LENGTH ,ADDRESS);
    22a6:	8e e6       	ldi	r24, 0x6E	; 110
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	65 e0       	ldi	r22, 0x05	; 5
    22ac:	41 e1       	ldi	r20, 0x11	; 17
    22ae:	53 e0       	ldi	r21, 0x03	; 3
    22b0:	0e 94 72 10 	call	0x20e4	; 0x20e4 <getAccessPassword>
            	passwordStatus=comparePasswords(entertedPassword,accessPassword,PASSWORD_LENGTH );
    22b4:	83 e7       	ldi	r24, 0x73	; 115
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	2e e6       	ldi	r18, 0x6E	; 110
    22ba:	31 e0       	ldi	r19, 0x01	; 1
    22bc:	b9 01       	movw	r22, r18
    22be:	45 e0       	ldi	r20, 0x05	; 5
    22c0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <comparePasswords>
    22c4:	80 93 68 01 	sts	0x0168, r24
            	if(passwordStatus==NOT_MATCH)
    22c8:	80 91 68 01 	lds	r24, 0x0168
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	31 f4       	brne	.+12     	; 0x22dc <main+0x76>
            	{
            		waitForHMI();
    22d0:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
            	 sendInterfaceOrder(DISPLAY_PASSWORD_NOT_MATCH_ERROR);
    22d4:	82 e4       	ldi	r24, 0x42	; 66
    22d6:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <main+0x80>

            	}

            	 else
            	{
            		 waitForHMI();
    22dc:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
            	 sendInterfaceOrder(DISPLAY_PASSWORD_Changed);
    22e0:	83 e4       	ldi	r24, 0x43	; 67
    22e2:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
		{
            if(firstpasswordFlag==0)
            {

            	passwordStatus=NOT_MATCH;
            	while(passwordStatus==NOT_MATCH)
    22e6:	80 91 68 01 	lds	r24, 0x0168
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	79 f2       	breq	.-98     	; 0x228c <main+0x26>



            }

            passwordStatus=NOT_MATCH;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 68 01 	sts	0x0168, r24
    22f4:	35 c0       	rjmp	.+106    	; 0x2360 <main+0xfa>
			while(passwordStatus==NOT_MATCH)
				 {
				     waitForHMI(); // wait for hmi to be avaliable
    22f6:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
					 sendInterfaceOrder(DISPLAY_GET_NEW_PASSWORD_SEQUENCE);
    22fa:	84 e4       	ldi	r24, 0x44	; 68
    22fc:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
					 sendControllerStatus(CONTROL_WAITING );
    2300:	81 e5       	ldi	r24, 0x51	; 81
    2302:	0e 94 26 11 	call	0x224c	; 0x224c <sendControllerStatus>
					 recievePassword(entertedPassword,PASSWORD_LENGTH );
    2306:	83 e7       	ldi	r24, 0x73	; 115
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	65 e0       	ldi	r22, 0x05	; 5
    230c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <recievePassword>
					 recievePassword(reentertedPAssword,PASSWORD_LENGTH );
    2310:	88 e7       	ldi	r24, 0x78	; 120
    2312:	91 e0       	ldi	r25, 0x01	; 1
    2314:	65 e0       	ldi	r22, 0x05	; 5
    2316:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <recievePassword>
					 passwordStatus=comparePasswords(entertedPassword,reentertedPAssword,PASSWORD_LENGTH );
    231a:	83 e7       	ldi	r24, 0x73	; 115
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	28 e7       	ldi	r18, 0x78	; 120
    2320:	31 e0       	ldi	r19, 0x01	; 1
    2322:	b9 01       	movw	r22, r18
    2324:	45 e0       	ldi	r20, 0x05	; 5
    2326:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <comparePasswords>
    232a:	80 93 68 01 	sts	0x0168, r24

					 if(passwordStatus==NOT_MATCH)
    232e:	80 91 68 01 	lds	r24, 0x0168
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	31 f4       	brne	.+12     	; 0x2342 <main+0xdc>
					 {
						 waitForHMI(); // wait for hmi to be avaliable
    2336:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
						 sendInterfaceOrder(DISPLAY_PASSWORD_NOT_MATCH_ERROR);
    233a:	82 e4       	ldi	r24, 0x42	; 66
    233c:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <main+0xfa>

					 }

					 else
					 {
						 waitForHMI(); // wait for hmi to be avaliable
    2342:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
						 sendInterfaceOrder(DISPLAY_PASSWORD_Changed);
    2346:	83 e4       	ldi	r24, 0x43	; 67
    2348:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
						 sendInterfaceOrder(DISPLAY_OPTION_MENU );
    234c:	86 e4       	ldi	r24, 0x46	; 70
    234e:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
						 savePassword(entertedPassword,PASSWORD_LENGTH ,ADDRESS);
    2352:	83 e7       	ldi	r24, 0x73	; 115
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	65 e0       	ldi	r22, 0x05	; 5
    2358:	41 e1       	ldi	r20, 0x11	; 17
    235a:	53 e0       	ldi	r21, 0x03	; 3
    235c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <savePassword>


            }

            passwordStatus=NOT_MATCH;
			while(passwordStatus==NOT_MATCH)
    2360:	80 91 68 01 	lds	r24, 0x0168
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	39 f2       	breq	.-114    	; 0x22f6 <main+0x90>
						 sendInterfaceOrder(DISPLAY_OPTION_MENU );
						 savePassword(entertedPassword,PASSWORD_LENGTH ,ADDRESS);

					 }
				 }
            firstpasswordFlag=0;
    2368:	10 92 69 01 	sts	0x0169, r1
    236c:	5d c0       	rjmp	.+186    	; 0x2428 <main+0x1c2>
		}

		else if(userRequest==Open_DOOR_REQ_ID )
    236e:	80 91 6a 01 	lds	r24, 0x016A
    2372:	87 34       	cpi	r24, 0x47	; 71
    2374:	09 f0       	breq	.+2      	; 0x2378 <main+0x112>
    2376:	58 c0       	rjmp	.+176    	; 0x2428 <main+0x1c2>
		{
			passwordStatus=NOT_MATCH;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 68 01 	sts	0x0168, r24
    237e:	4f c0       	rjmp	.+158    	; 0x241e <main+0x1b8>
			while(passwordStatus==NOT_MATCH)
			            	{
				            waitForHMI();
    2380:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
			            	sendInterfaceOrder(GET_ENTERED_PASSWORD);
    2384:	89 e4       	ldi	r24, 0x49	; 73
    2386:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>

			            	sendControllerStatus(CONTROL_WAITING );
    238a:	81 e5       	ldi	r24, 0x51	; 81
    238c:	0e 94 26 11 	call	0x224c	; 0x224c <sendControllerStatus>
			            	recievePassword(entertedPassword,PASSWORD_LENGTH );
    2390:	83 e7       	ldi	r24, 0x73	; 115
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <recievePassword>
			            	getAccessPassword(accessPassword,PASSWORD_LENGTH ,ADDRESS);
    239a:	8e e6       	ldi	r24, 0x6E	; 110
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	65 e0       	ldi	r22, 0x05	; 5
    23a0:	41 e1       	ldi	r20, 0x11	; 17
    23a2:	53 e0       	ldi	r21, 0x03	; 3
    23a4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <getAccessPassword>
			            	passwordStatus=comparePasswords(entertedPassword,accessPassword,PASSWORD_LENGTH );
    23a8:	83 e7       	ldi	r24, 0x73	; 115
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	2e e6       	ldi	r18, 0x6E	; 110
    23ae:	31 e0       	ldi	r19, 0x01	; 1
    23b0:	b9 01       	movw	r22, r18
    23b2:	45 e0       	ldi	r20, 0x05	; 5
    23b4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <comparePasswords>
    23b8:	80 93 68 01 	sts	0x0168, r24
			            	if(passwordStatus==NOT_MATCH)
    23bc:	80 91 68 01 	lds	r24, 0x0168
    23c0:	81 30       	cpi	r24, 0x01	; 1
    23c2:	09 f5       	brne	.+66     	; 0x2406 <main+0x1a0>
			            	{
			            		EnterpasswordAttempt--;
    23c4:	80 91 6b 01 	lds	r24, 0x016B
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	80 93 6b 01 	sts	0x016B, r24
			            	    if(EnterpasswordAttempt==0)
    23ce:	80 91 6b 01 	lds	r24, 0x016B
    23d2:	88 23       	and	r24, r24
    23d4:	91 f4       	brne	.+36     	; 0x23fa <main+0x194>
			            		 {
			                      waitForHMI();
    23d6:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
			            		  sendInterfaceOrder( DISPLAY_SECURITY_ALARM );
    23da:	89 e5       	ldi	r24, 0x59	; 89
    23dc:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
			            		  triggerBuzzerAlarm(ALARM_TIME_IN_SECONDS );
    23e0:	6a e0       	ldi	r22, 0x0A	; 10
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <triggerBuzzerAlarm>
			            		  EnterpasswordAttempt=PASSWORDS_ENTERING_ATTEMPTS;
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	80 93 6b 01 	sts	0x016B, r24
			            		  sendInterfaceOrder(DISPLAY_OPTION_MENU );
    23f2:	86 e4       	ldi	r24, 0x46	; 70
    23f4:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
    23f8:	17 c0       	rjmp	.+46     	; 0x2428 <main+0x1c2>
			            		  break;
			            		 }

			            	 else
			            	 {
			            		 waitForHMI();
    23fa:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
			            		 sendInterfaceOrder(DISPLAY_PASSWORD_NOT_MATCH_ERROR);
    23fe:	82 e4       	ldi	r24, 0x42	; 66
    2400:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
    2404:	0c c0       	rjmp	.+24     	; 0x241e <main+0x1b8>

			            	}

			            	 else
			            	{
			            		 waitForHMI();
    2406:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
			            		 sendInterfaceOrder(DISPLAY_DOOR_OPEN_SEQUENCE);
    240a:	85 e4       	ldi	r24, 0x45	; 69
    240c:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
			            		 doorOpenSequence();
    2410:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <doorOpenSequence>
			            		 waitForHMI();
    2414:	0e 94 1a 11 	call	0x2234	; 0x2234 <waitForHMI>
			            		sendInterfaceOrder(DISPLAY_OPTION_MENU );
    2418:	86 e4       	ldi	r24, 0x46	; 70
    241a:	0e 94 4b 10 	call	0x2096	; 0x2096 <sendInterfaceOrder>
		}

		else if(userRequest==Open_DOOR_REQ_ID )
		{
			passwordStatus=NOT_MATCH;
			while(passwordStatus==NOT_MATCH)
    241e:	80 91 68 01 	lds	r24, 0x0168
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	09 f4       	brne	.+2      	; 0x2428 <main+0x1c2>
    2426:	ac cf       	rjmp	.-168    	; 0x2380 <main+0x11a>
			            	}


		}

		sendControllerStatus(CONTROL_WAITING );
    2428:	81 e5       	ldi	r24, 0x51	; 81
    242a:	0e 94 26 11 	call	0x224c	; 0x224c <sendControllerStatus>
		userRequest= recieveUserRequest();
    242e:	0e 94 65 10 	call	0x20ca	; 0x20ca <recieveUserRequest>
    2432:	80 93 6a 01 	sts	0x016A, r24
    2436:	1d cf       	rjmp	.-454    	; 0x2272 <main+0xc>

00002438 <__mulsi3>:
    2438:	62 9f       	mul	r22, r18
    243a:	d0 01       	movw	r26, r0
    243c:	73 9f       	mul	r23, r19
    243e:	f0 01       	movw	r30, r0
    2440:	82 9f       	mul	r24, r18
    2442:	e0 0d       	add	r30, r0
    2444:	f1 1d       	adc	r31, r1
    2446:	64 9f       	mul	r22, r20
    2448:	e0 0d       	add	r30, r0
    244a:	f1 1d       	adc	r31, r1
    244c:	92 9f       	mul	r25, r18
    244e:	f0 0d       	add	r31, r0
    2450:	83 9f       	mul	r24, r19
    2452:	f0 0d       	add	r31, r0
    2454:	74 9f       	mul	r23, r20
    2456:	f0 0d       	add	r31, r0
    2458:	65 9f       	mul	r22, r21
    245a:	f0 0d       	add	r31, r0
    245c:	99 27       	eor	r25, r25
    245e:	72 9f       	mul	r23, r18
    2460:	b0 0d       	add	r27, r0
    2462:	e1 1d       	adc	r30, r1
    2464:	f9 1f       	adc	r31, r25
    2466:	63 9f       	mul	r22, r19
    2468:	b0 0d       	add	r27, r0
    246a:	e1 1d       	adc	r30, r1
    246c:	f9 1f       	adc	r31, r25
    246e:	bd 01       	movw	r22, r26
    2470:	cf 01       	movw	r24, r30
    2472:	11 24       	eor	r1, r1
    2474:	08 95       	ret

00002476 <__udivmodsi4>:
    2476:	a1 e2       	ldi	r26, 0x21	; 33
    2478:	1a 2e       	mov	r1, r26
    247a:	aa 1b       	sub	r26, r26
    247c:	bb 1b       	sub	r27, r27
    247e:	fd 01       	movw	r30, r26
    2480:	0d c0       	rjmp	.+26     	; 0x249c <__udivmodsi4_ep>

00002482 <__udivmodsi4_loop>:
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	ee 1f       	adc	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	a2 17       	cp	r26, r18
    248c:	b3 07       	cpc	r27, r19
    248e:	e4 07       	cpc	r30, r20
    2490:	f5 07       	cpc	r31, r21
    2492:	20 f0       	brcs	.+8      	; 0x249c <__udivmodsi4_ep>
    2494:	a2 1b       	sub	r26, r18
    2496:	b3 0b       	sbc	r27, r19
    2498:	e4 0b       	sbc	r30, r20
    249a:	f5 0b       	sbc	r31, r21

0000249c <__udivmodsi4_ep>:
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	1a 94       	dec	r1
    24a6:	69 f7       	brne	.-38     	; 0x2482 <__udivmodsi4_loop>
    24a8:	60 95       	com	r22
    24aa:	70 95       	com	r23
    24ac:	80 95       	com	r24
    24ae:	90 95       	com	r25
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	bd 01       	movw	r22, r26
    24b6:	cf 01       	movw	r24, r30
    24b8:	08 95       	ret

000024ba <__prologue_saves__>:
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	ca 1b       	sub	r28, r26
    24e4:	db 0b       	sbc	r29, r27
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	09 94       	ijmp

000024f2 <__epilogue_restores__>:
    24f2:	2a 88       	ldd	r2, Y+18	; 0x12
    24f4:	39 88       	ldd	r3, Y+17	; 0x11
    24f6:	48 88       	ldd	r4, Y+16	; 0x10
    24f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    24fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    24fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2500:	9b 84       	ldd	r9, Y+11	; 0x0b
    2502:	aa 84       	ldd	r10, Y+10	; 0x0a
    2504:	b9 84       	ldd	r11, Y+9	; 0x09
    2506:	c8 84       	ldd	r12, Y+8	; 0x08
    2508:	df 80       	ldd	r13, Y+7	; 0x07
    250a:	ee 80       	ldd	r14, Y+6	; 0x06
    250c:	fd 80       	ldd	r15, Y+5	; 0x05
    250e:	0c 81       	ldd	r16, Y+4	; 0x04
    2510:	1b 81       	ldd	r17, Y+3	; 0x03
    2512:	aa 81       	ldd	r26, Y+2	; 0x02
    2514:	b9 81       	ldd	r27, Y+1	; 0x01
    2516:	ce 0f       	add	r28, r30
    2518:	d1 1d       	adc	r29, r1
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	ed 01       	movw	r28, r26
    2526:	08 95       	ret

00002528 <_exit>:
    2528:	f8 94       	cli

0000252a <__stop_program>:
    252a:	ff cf       	rjmp	.-2      	; 0x252a <__stop_program>
