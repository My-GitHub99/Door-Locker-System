
Door_Locker_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  000032b4  00003348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080014e  0080014e  00003436  2**0
                  ALLOC
  3 .stab         000034ec  00000000  00000000  00003438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016c7  00000000  00000000  00006924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000812b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000829b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000adcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 18 	call	0x3008	; 0x3008 <main>
      8a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e4       	ldi	r26, 0x45	; 69
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e4       	ldi	r24, 0x45	; 69
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6b 83       	std	Y+3, r22	; 0x03
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	ad 81       	ldd	r26, Y+5	; 0x05
     b7e:	be 81       	ldd	r27, Y+6	; 0x06
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	92 e1       	ldi	r25, 0x12	; 18
     ba0:	aa e7       	ldi	r26, 0x7A	; 122
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 ba 18 	call	0x3174	; 0x3174 <__udivmodsi4>
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	89 2f       	mov	r24, r25
     bc0:	99 27       	eor	r25, r25
     bc2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bc4:	e9 e2       	ldi	r30, 0x29	; 41
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
}
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 72       	andi	r24, 0x20	; 32
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	b9 f3       	breq	.-18     	; 0xbea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c14:	eb e2       	ldi	r30, 0x2B	; 43
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	dc f7       	brge	.-10     	; 0xc14 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c1e:	ec e2       	ldi	r30, 0x2C	; 44
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <UART_sendString+0x6>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	fc 01       	movw	r30, r24
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		i++;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	39 f7       	brne	.-50     	; 0xc3e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_receiveString+0xa>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01
     c92:	0f c0       	rjmp	.+30     	; 0xcb2 <UART_receiveString+0x36>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		Str[i] = UART_recieveByte();
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	8c 01       	movw	r16, r24
     ca0:	02 0f       	add	r16, r18
     ca2:	13 1f       	adc	r17, r19
     ca4:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     ca8:	f8 01       	movw	r30, r16
     caa:	80 83       	st	Z, r24
		i++;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	89 83       	std	Y+1, r24	; 0x01
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	fc 01       	movw	r30, r24
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	80 81       	ld	r24, Z
     cc4:	83 32       	cpi	r24, 0x23	; 35
     cc6:	31 f7       	brne	.-52     	; 0xc94 <UART_receiveString+0x18>
		Str[i] = UART_recieveByte();
		i++;
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	10 82       	st	Z, r1
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <Timer_init>:

/*-------------------------->Public Functions Definitions<------------------------------*/

/* A function to initialize all timers */
void Timer_init(const TimerConfig*config_Ptr)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <Timer_init+0x6>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01


		if(config_Ptr->mode == NORMAL)
     cf8:	e9 81       	ldd	r30, Y+1	; 0x01
     cfa:	fa 81       	ldd	r31, Y+2	; 0x02
     cfc:	80 81       	ld	r24, Z
     cfe:	88 23       	and	r24, r24
     d00:	09 f5       	brne	.+66     	; 0xd44 <Timer_init+0x5a>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 normal mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (Normal mode)
			 * WGM11:10=0b00              No wave generation (Normal mode)
			 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     d02:	ef e4       	ldi	r30, 0x4F	; 79
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	8c e0       	ldi	r24, 0x0C	; 12
     d08:	80 83       	st	Z, r24
			/*
			 * Timer/Counter Control Register1 B (TCCR1B)
			 * CS12:10=config_Ptr->clock   To select the desired prescaler
			 *
			 */
			TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
     d0a:	ae e4       	ldi	r26, 0x4E	; 78
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ee e4       	ldi	r30, 0x4E	; 78
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	98 2f       	mov	r25, r24
     d16:	98 7f       	andi	r25, 0xF8	; 248
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	83 81       	ldd	r24, Z+3	; 0x03
     d1e:	89 2b       	or	r24, r25
     d20:	8c 93       	st	X, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1 = config_Ptr->initialValue;
     d22:	ac e4       	ldi	r26, 0x4C	; 76
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	81 81       	ldd	r24, Z+1	; 0x01
     d2c:	92 81       	ldd	r25, Z+2	; 0x02
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * TOIE1=1   To enable the overflow interrupt
			 */
			SET_BIT(TIMSK, TOIE1);
     d34:	a9 e5       	ldi	r26, 0x59	; 89
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e9 e5       	ldi	r30, 0x59	; 89
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	8c 93       	st	X, r24
     d42:	35 c0       	rjmp	.+106    	; 0xdae <Timer_init+0xc4>

		}

		else if(config_Ptr->mode == COMPARE)
     d44:	e9 81       	ldd	r30, Y+1	; 0x01
     d46:	fa 81       	ldd	r31, Y+2	; 0x02
     d48:	80 81       	ld	r24, Z
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	81 f5       	brne	.+96     	; 0xdae <Timer_init+0xc4>
			 * Timer/Counter1 Control Register1 A (TCCR1A)
			 * COM1A1:0/COM1B1:0=0b0000   To select timer1 compare mode operation
			 * FOC1A/FOC1B=0b11           Non-PWM mode (compare mode)
			 * WGM11:10=0b00              No wave generation (compare mode)
			 */
			TCCR1A = (1<<FOC1A);
     d4e:	ef e4       	ldi	r30, 0x4F	; 79
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	80 83       	st	Z, r24
			/*
			 * Timer/Counter Control Register1 B (TCCR1B)
			 * CS12:10=config_Ptr->clock   To select the desired prescaler
			 * WGM10:13=0100,WGM12=1       To selclet Clear TCNT1 on Compare match mode(CTC mode)
			 */
			TCCR1B = (TCCR1B & 0xF8) | (config_Ptr->clock);
     d56:	ae e4       	ldi	r26, 0x4E	; 78
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ee e4       	ldi	r30, 0x4E	; 78
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	98 2f       	mov	r25, r24
     d62:	98 7f       	andi	r25, 0xF8	; 248
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	83 81       	ldd	r24, Z+3	; 0x03
     d6a:	89 2b       	or	r24, r25
     d6c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
     d6e:	ae e4       	ldi	r26, 0x4E	; 78
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ee e4       	ldi	r30, 0x4E	; 78
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	88 60       	ori	r24, 0x08	; 8
     d7a:	8c 93       	st	X, r24

			/*
			 * Timer/Counter1
			 * TCNT1=config_Ptr->initialValue   To initialize the timer by the desired value
			 */
			TCNT1 = config_Ptr->initialValue;
     d7c:	ac e4       	ldi	r26, 0x4C	; 76
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e9 81       	ldd	r30, Y+1	; 0x01
     d82:	fa 81       	ldd	r31, Y+2	; 0x02
     d84:	81 81       	ldd	r24, Z+1	; 0x01
     d86:	92 81       	ldd	r25, Z+2	; 0x02
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	9c 93       	st	X, r25
     d8c:	8e 93       	st	-X, r24

			/*
			 * Output Compare Register 1 A OCR1A
			 * OCR1A=config_Ptr->compareValue   To set the compare match value in CTC
			 */
			OCR1A = config_Ptr->compareValue;
     d8e:	aa e4       	ldi	r26, 0x4A	; 74
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	84 81       	ldd	r24, Z+4	; 0x04
     d98:	95 81       	ldd	r25, Z+5	; 0x05
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	9c 93       	st	X, r25
     d9e:	8e 93       	st	-X, r24

			/*
			 * Timer Interrupt Mask TIMSK
			 * OCIE1A=1   To enable the Output Compare A match interrupt
			 */
			SET_BIT(TIMSK, OCIE1A);
     da0:	a9 e5       	ldi	r26, 0x59	; 89
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e9 e5       	ldi	r30, 0x59	; 89
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 61       	ori	r24, 0x10	; 16
     dac:	8c 93       	st	X, r24
		}
	}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <Timer_deInit>:

void Timer_deInit(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62


		/* clear all timer1 registers */
		TCCR1A = 0;
     dc0:	ef e4       	ldi	r30, 0x4F	; 79
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	10 82       	st	Z, r1
		TCCR1B = 0;
     dc6:	ee e4       	ldi	r30, 0x4E	; 78
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	10 82       	st	Z, r1
		TCNT1 = 0;
     dcc:	ec e4       	ldi	r30, 0x4C	; 76
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	11 82       	std	Z+1, r1	; 0x01
     dd2:	10 82       	st	Z, r1

}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <Timer1_setCallBack>:



void Timer1_setCallBack(void(*a_Ptr)())
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <Timer1_setCallBack+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_Ptr;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	90 93 4f 01 	sts	0x014F, r25
     df0:	80 93 4e 01 	sts	0x014E, r24
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <Timer0_PWM_Init>:


/* A function to initialize Timer0 in PWM Mode: */
void Timer0_PWM_Init(uint8 DutyCycle)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB,PB3);   /* OC0(PB3) is output to generate PWM Signal */
     e0a:	a7 e3       	ldi	r26, 0x37	; 55
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e7 e3       	ldi	r30, 0x37	; 55
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	88 60       	ori	r24, 0x08	; 8
     e16:	8c 93       	st	X, r24
	/* Timer/Counter0 Control Register TCCR0
	 * WGM01:0=0b11 To select fast PWM mode
	 * COM01:0=0b10 To select PWM non-inverting mode
	 * CS02:0=0b010 To select prescaler=8
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     e18:	e3 e5       	ldi	r30, 0x53	; 83
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	8a e6       	ldi	r24, 0x6A	; 106
     e1e:	80 83       	st	Z, r24

	TCNT0 = 0;          /* Timer0 initial value=0 */
     e20:	e2 e5       	ldi	r30, 0x52	; 82
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	10 82       	st	Z, r1
	OCR0 = DutyCycle;   /* Set OCR0 by the desired duty cycle */
     e26:	ec e5       	ldi	r30, 0x5C	; 92
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	80 83       	st	Z, r24

 }   /* End Timer0_PWM_Init function */
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)(*g_callBackPtr)();
     e60:	80 91 4e 01 	lds	r24, 0x014E
     e64:	90 91 4f 01 	lds	r25, 0x014F
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	29 f0       	breq	.+10     	; 0xe76 <__vector_7+0x40>
     e6c:	e0 91 4e 01 	lds	r30, 0x014E
     e70:	f0 91 4f 01 	lds	r31, 0x014F
     e74:	09 95       	icall
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <GPIO_setupPinDirection+0x6>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <GPIO_setupPinDirection+0x8>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	6a 83       	std	Y+2, r22	; 0x02
     eae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <GPIO_setupPinDirection+0x1c>
     eb6:	d5 c0       	rjmp	.+426    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	08 f0       	brcs	.+2      	; 0xec0 <GPIO_setupPinDirection+0x24>
     ebe:	d1 c0       	rjmp	.+418    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3d 83       	std	Y+5, r19	; 0x05
     ec8:	2c 83       	std	Y+4, r18	; 0x04
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <GPIO_setupPinDirection+0x3a>
     ed4:	43 c0       	rjmp	.+134    	; 0xf5c <GPIO_setupPinDirection+0xc0>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	2c f4       	brge	.+10     	; 0xeea <GPIO_setupPinDirection+0x4e>
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	71 f0       	breq	.+28     	; 0xf04 <GPIO_setupPinDirection+0x68>
     ee8:	bc c0       	rjmp	.+376    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <GPIO_setupPinDirection+0x5a>
     ef4:	5f c0       	rjmp	.+190    	; 0xfb4 <GPIO_setupPinDirection+0x118>
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	91 05       	cpc	r25, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <GPIO_setupPinDirection+0x66>
     f00:	85 c0       	rjmp	.+266    	; 0x100c <GPIO_setupPinDirection+0x170>
     f02:	af c0       	rjmp	.+350    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	a1 f4       	brne	.+40     	; 0xf32 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f0a:	aa e3       	ldi	r26, 0x3A	; 58
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ea e3       	ldi	r30, 0x3A	; 58
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_setupPinDirection+0x8c>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_setupPinDirection+0x88>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	98 c0       	rjmp	.+304    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f32:	aa e3       	ldi	r26, 0x3A	; 58
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e3       	ldi	r30, 0x3A	; 58
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_setupPinDirection+0xb4>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_setupPinDirection+0xb0>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	83 c0       	rjmp	.+262    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	a1 f4       	brne	.+40     	; 0xf8a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f62:	a7 e3       	ldi	r26, 0x37	; 55
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 e3       	ldi	r30, 0x37	; 55
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_setupPinDirection+0xe4>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_setupPinDirection+0xe0>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	6c c0       	rjmp	.+216    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f8a:	a7 e3       	ldi	r26, 0x37	; 55
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x10c>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x108>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	57 c0       	rjmp	.+174    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	a1 f4       	brne	.+40     	; 0xfe2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fba:	a4 e3       	ldi	r26, 0x34	; 52
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e4 e3       	ldi	r30, 0x34	; 52
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_setupPinDirection+0x13c>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_setupPinDirection+0x138>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	40 c0       	rjmp	.+128    	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fe2:	a4 e3       	ldi	r26, 0x34	; 52
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e4 e3       	ldi	r30, 0x34	; 52
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0x164>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0x160>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	2b c0       	rjmp	.+86     	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	a1 f4       	brne	.+40     	; 0x103a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1012:	a1 e3       	ldi	r26, 0x31	; 49
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e1 e3       	ldi	r30, 0x31	; 49
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_setupPinDirection+0x194>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_setupPinDirection+0x190>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    103a:	a1 e3       	ldi	r26, 0x31	; 49
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e1 e3       	ldi	r30, 0x31	; 49
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_setupPinDirection+0x1bc>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_setupPinDirection+0x1b8>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_writePin+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_writePin+0x8>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	6a 83       	std	Y+2, r22	; 0x02
    1084:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	08 f0       	brcs	.+2      	; 0x108e <GPIO_writePin+0x1c>
    108c:	d5 c0       	rjmp	.+426    	; 0x1238 <GPIO_writePin+0x1c6>
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	08 f0       	brcs	.+2      	; 0x1096 <GPIO_writePin+0x24>
    1094:	d1 c0       	rjmp	.+418    	; 0x1238 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3d 83       	std	Y+5, r19	; 0x05
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_writePin+0x3a>
    10aa:	43 c0       	rjmp	.+134    	; 0x1132 <GPIO_writePin+0xc0>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <GPIO_writePin+0x4e>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	71 f0       	breq	.+28     	; 0x10da <GPIO_writePin+0x68>
    10be:	bc c0       	rjmp	.+376    	; 0x1238 <GPIO_writePin+0x1c6>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <GPIO_writePin+0x5a>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <GPIO_writePin+0x118>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_writePin+0x66>
    10d6:	85 c0       	rjmp	.+266    	; 0x11e2 <GPIO_writePin+0x170>
    10d8:	af c0       	rjmp	.+350    	; 0x1238 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	a1 f4       	brne	.+40     	; 0x1108 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10e0:	ab e3       	ldi	r26, 0x3B	; 59
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_writePin+0x8c>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_writePin+0x88>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	98 c0       	rjmp	.+304    	; 0x1238 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_writePin+0xb4>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_writePin+0xb0>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	83 c0       	rjmp	.+262    	; 0x1238 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	a1 f4       	brne	.+40     	; 0x1160 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1138:	a8 e3       	ldi	r26, 0x38	; 56
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e3       	ldi	r30, 0x38	; 56
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_writePin+0xe4>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_writePin+0xe0>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	6c c0       	rjmp	.+216    	; 0x1238 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1160:	a8 e3       	ldi	r26, 0x38	; 56
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e8 e3       	ldi	r30, 0x38	; 56
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_writePin+0x10c>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_writePin+0x108>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	57 c0       	rjmp	.+174    	; 0x1238 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1190:	a5 e3       	ldi	r26, 0x35	; 53
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e3       	ldi	r30, 0x35	; 53
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_writePin+0x13c>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_writePin+0x138>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	40 c0       	rjmp	.+128    	; 0x1238 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11b8:	a5 e3       	ldi	r26, 0x35	; 53
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_writePin+0x164>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_writePin+0x160>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	2b c0       	rjmp	.+86     	; 0x1238 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11e8:	a2 e3       	ldi	r26, 0x32	; 50
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e2 e3       	ldi	r30, 0x32	; 50
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_writePin+0x194>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_writePin+0x190>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1210:	a2 e3       	ldi	r26, 0x32	; 50
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e2 e3       	ldi	r30, 0x32	; 50
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_writePin+0x1bc>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_writePin+0x1b8>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_readPin+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_readPin+0x8>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    125a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <GPIO_readPin+0x1c>
    1262:	84 c0       	rjmp	.+264    	; 0x136c <GPIO_readPin+0x124>
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	08 f0       	brcs	.+2      	; 0x126c <GPIO_readPin+0x24>
    126a:	80 c0       	rjmp	.+256    	; 0x136c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3d 83       	std	Y+5, r19	; 0x05
    1274:	2c 83       	std	Y+4, r18	; 0x04
    1276:	4c 81       	ldd	r20, Y+4	; 0x04
    1278:	5d 81       	ldd	r21, Y+5	; 0x05
    127a:	41 30       	cpi	r20, 0x01	; 1
    127c:	51 05       	cpc	r21, r1
    127e:	79 f1       	breq	.+94     	; 0x12de <GPIO_readPin+0x96>
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	91 05       	cpc	r25, r1
    1288:	34 f4       	brge	.+12     	; 0x1296 <GPIO_readPin+0x4e>
    128a:	2c 81       	ldd	r18, Y+4	; 0x04
    128c:	3d 81       	ldd	r19, Y+5	; 0x05
    128e:	21 15       	cp	r18, r1
    1290:	31 05       	cpc	r19, r1
    1292:	69 f0       	breq	.+26     	; 0x12ae <GPIO_readPin+0x66>
    1294:	6b c0       	rjmp	.+214    	; 0x136c <GPIO_readPin+0x124>
    1296:	4c 81       	ldd	r20, Y+4	; 0x04
    1298:	5d 81       	ldd	r21, Y+5	; 0x05
    129a:	42 30       	cpi	r20, 0x02	; 2
    129c:	51 05       	cpc	r21, r1
    129e:	b9 f1       	breq	.+110    	; 0x130e <GPIO_readPin+0xc6>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <GPIO_readPin+0x64>
    12aa:	49 c0       	rjmp	.+146    	; 0x133e <GPIO_readPin+0xf6>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12ae:	e9 e3       	ldi	r30, 0x39	; 57
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_readPin+0x7e>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_readPin+0x7a>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	88 23       	and	r24, r24
    12d2:	19 f0       	breq	.+6      	; 0x12da <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	49 c0       	rjmp	.+146    	; 0x136c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	47 c0       	rjmp	.+142    	; 0x136c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12de:	e6 e3       	ldi	r30, 0x36	; 54
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_readPin+0xae>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_readPin+0xaa>
    12fa:	ca 01       	movw	r24, r20
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	88 23       	and	r24, r24
    1302:	19 f0       	breq	.+6      	; 0x130a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	31 c0       	rjmp	.+98     	; 0x136c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    130a:	19 82       	std	Y+1, r1	; 0x01
    130c:	2f c0       	rjmp	.+94     	; 0x136c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    130e:	e3 e3       	ldi	r30, 0x33	; 51
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a9 01       	movw	r20, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_readPin+0xde>
    1322:	55 95       	asr	r21
    1324:	47 95       	ror	r20
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_readPin+0xda>
    132a:	ca 01       	movw	r24, r20
    132c:	81 70       	andi	r24, 0x01	; 1
    132e:	90 70       	andi	r25, 0x00	; 0
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	19 c0       	rjmp	.+50     	; 0x136c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    133a:	19 82       	std	Y+1, r1	; 0x01
    133c:	17 c0       	rjmp	.+46     	; 0x136c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    133e:	e0 e3       	ldi	r30, 0x30	; 48
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_readPin+0x10e>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_readPin+0x10a>
    135a:	ca 01       	movw	r24, r20
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	90 70       	andi	r25, 0x00	; 0
    1360:	88 23       	and	r24, r24
    1362:	19 f0       	breq	.+6      	; 0x136a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	01 c0       	rjmp	.+2      	; 0x136c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    136a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_setupPortDirection+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_setupPortDirection+0x8>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	90 f5       	brcc	.+100    	; 0x13f8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3c 83       	std	Y+4, r19	; 0x04
    139c:	2b 83       	std	Y+3, r18	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	d1 f0       	breq	.+52     	; 0x13dc <GPIO_setupPortDirection+0x5e>
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <GPIO_setupPortDirection+0x3e>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <GPIO_setupPortDirection+0x54>
    13ba:	1e c0       	rjmp	.+60     	; 0x13f8 <GPIO_setupPortDirection+0x7a>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <GPIO_setupPortDirection+0x68>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <GPIO_setupPortDirection+0x72>
    13d0:	13 c0       	rjmp	.+38     	; 0x13f8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13d2:	ea e3       	ldi	r30, 0x3A	; 58
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	80 83       	st	Z, r24
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13dc:	e7 e3       	ldi	r30, 0x37	; 55
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13f0:	e1 e3       	ldi	r30, 0x31	; 49
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <GPIO_writePort+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <GPIO_writePort+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	90 f5       	brcc	.+100    	; 0x1480 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	d1 f0       	breq	.+52     	; 0x1464 <GPIO_writePort+0x5e>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <GPIO_writePort+0x3e>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <GPIO_writePort+0x54>
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <GPIO_writePort+0x7a>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	81 f0       	breq	.+32     	; 0x146e <GPIO_writePort+0x68>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	81 f0       	breq	.+32     	; 0x1478 <GPIO_writePort+0x72>
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1464:	e8 e3       	ldi	r30, 0x38	; 56
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	80 83       	st	Z, r24
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <GPIO_readPort+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <GPIO_readPort+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    149c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	90 f5       	brcc	.+100    	; 0x1508 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3c 83       	std	Y+4, r19	; 0x04
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	d1 f0       	breq	.+52     	; 0x14ec <GPIO_readPort+0x5e>
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	3c 81       	ldd	r19, Y+4	; 0x04
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	2c f4       	brge	.+10     	; 0x14cc <GPIO_readPort+0x3e>
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <GPIO_readPort+0x54>
    14ca:	1e c0       	rjmp	.+60     	; 0x1508 <GPIO_readPort+0x7a>
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <GPIO_readPort+0x68>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <GPIO_readPort+0x72>
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14e2:	e9 e3       	ldi	r30, 0x39	; 57
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	0e c0       	rjmp	.+28     	; 0x1508 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14ec:	e6 e3       	ldi	r30, 0x36	; 54
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14f6:	e3 e3       	ldi	r30, 0x33	; 51
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1500:	e0 e3       	ldi	r30, 0x30	; 48
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	2e 97       	sbiw	r28, 0x0e	; 14
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	62 e0       	ldi	r22, 0x02	; 2
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 ea       	ldi	r26, 0xA0	; 160
    1546:	b1 e4       	ldi	r27, 0x41	; 65
    1548:	8b 87       	std	Y+11, r24	; 0x0b
    154a:	9c 87       	std	Y+12, r25	; 0x0c
    154c:	ad 87       	std	Y+13, r26	; 0x0d
    154e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1550:	6b 85       	ldd	r22, Y+11	; 0x0b
    1552:	7c 85       	ldd	r23, Y+12	; 0x0c
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a ef       	ldi	r20, 0xFA	; 250
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8f 83       	std	Y+7, r24	; 0x07
    156a:	98 87       	std	Y+8, r25	; 0x08
    156c:	a9 87       	std	Y+9, r26	; 0x09
    156e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <LCD_init+0x7a>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <LCD_init+0xda>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_init+0xc8>
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <LCD_init+0xbc>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_init+0x104>
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	0e 94 bf 09 	call	0x137e	; 0x137e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    162c:	88 e3       	ldi	r24, 0x38	; 56
    162e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1632:	8c e0       	ldi	r24, 0x0C	; 12
    1634:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    163e:	2e 96       	adiw	r28, 0x0e	; 14
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	e9 97       	sbiw	r28, 0x39	; 57
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a0 e8       	ldi	r26, 0x80	; 128
    1676:	bf e3       	ldi	r27, 0x3F	; 63
    1678:	8d ab       	std	Y+53, r24	; 0x35
    167a:	9e ab       	std	Y+54, r25	; 0x36
    167c:	af ab       	std	Y+55, r26	; 0x37
    167e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1680:	6d a9       	ldd	r22, Y+53	; 0x35
    1682:	7e a9       	ldd	r23, Y+54	; 0x36
    1684:	8f a9       	ldd	r24, Y+55	; 0x37
    1686:	98 ad       	ldd	r25, Y+56	; 0x38
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a ef       	ldi	r20, 0xFA	; 250
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	89 ab       	std	Y+49, r24	; 0x31
    169a:	9a ab       	std	Y+50, r25	; 0x32
    169c:	ab ab       	std	Y+51, r26	; 0x33
    169e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16a0:	69 a9       	ldd	r22, Y+49	; 0x31
    16a2:	7a a9       	ldd	r23, Y+50	; 0x32
    16a4:	8b a9       	ldd	r24, Y+51	; 0x33
    16a6:	9c a9       	ldd	r25, Y+52	; 0x34
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e8       	ldi	r20, 0x80	; 128
    16ae:	5f e3       	ldi	r21, 0x3F	; 63
    16b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b4:	88 23       	and	r24, r24
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <LCD_sendCommand+0x72>
		__ticks = 1;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	98 ab       	std	Y+48, r25	; 0x30
    16be:	8f a7       	std	Y+47, r24	; 0x2f
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16c2:	69 a9       	ldd	r22, Y+49	; 0x31
    16c4:	7a a9       	ldd	r23, Y+50	; 0x32
    16c6:	8b a9       	ldd	r24, Y+51	; 0x33
    16c8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	3f ef       	ldi	r19, 0xFF	; 255
    16ce:	4f e7       	ldi	r20, 0x7F	; 127
    16d0:	57 e4       	ldi	r21, 0x47	; 71
    16d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	4c f5       	brge	.+82     	; 0x172c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16da:	6d a9       	ldd	r22, Y+53	; 0x35
    16dc:	7e a9       	ldd	r23, Y+54	; 0x36
    16de:	8f a9       	ldd	r24, Y+55	; 0x37
    16e0:	98 ad       	ldd	r25, Y+56	; 0x38
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	98 ab       	std	Y+48, r25	; 0x30
    1700:	8f a7       	std	Y+47, r24	; 0x2f
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <LCD_sendCommand+0xd2>
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e a7       	std	Y+46, r25	; 0x2e
    170a:	8d a7       	std	Y+45, r24	; 0x2d
    170c:	8d a5       	ldd	r24, Y+45	; 0x2d
    170e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <LCD_sendCommand+0xc0>
    1714:	9e a7       	std	Y+46, r25	; 0x2e
    1716:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	8f a5       	ldd	r24, Y+47	; 0x2f
    171a:	98 a9       	ldd	r25, Y+48	; 0x30
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	98 ab       	std	Y+48, r25	; 0x30
    1720:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	8f a5       	ldd	r24, Y+47	; 0x2f
    1724:	98 a9       	ldd	r25, Y+48	; 0x30
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	69 f7       	brne	.-38     	; 0x1704 <LCD_sendCommand+0xb4>
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	69 a9       	ldd	r22, Y+49	; 0x31
    172e:	7a a9       	ldd	r23, Y+50	; 0x32
    1730:	8b a9       	ldd	r24, Y+51	; 0x33
    1732:	9c a9       	ldd	r25, Y+52	; 0x34
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	98 ab       	std	Y+48, r25	; 0x30
    173e:	8f a7       	std	Y+47, r24	; 0x2f
    1740:	8f a5       	ldd	r24, Y+47	; 0x2f
    1742:	98 a9       	ldd	r25, Y+48	; 0x30
    1744:	9c a7       	std	Y+44, r25	; 0x2c
    1746:	8b a7       	std	Y+43, r24	; 0x2b
    1748:	8b a5       	ldd	r24, Y+43	; 0x2b
    174a:	9c a5       	ldd	r25, Y+44	; 0x2c
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_sendCommand+0xfc>
    1750:	9c a7       	std	Y+44, r25	; 0x2c
    1752:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	62 e0       	ldi	r22, 0x02	; 2
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e8       	ldi	r26, 0x80	; 128
    1764:	bf e3       	ldi	r27, 0x3F	; 63
    1766:	8f a3       	std	Y+39, r24	; 0x27
    1768:	98 a7       	std	Y+40, r25	; 0x28
    176a:	a9 a7       	std	Y+41, r26	; 0x29
    176c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6f a1       	ldd	r22, Y+39	; 0x27
    1770:	78 a5       	ldd	r23, Y+40	; 0x28
    1772:	89 a5       	ldd	r24, Y+41	; 0x29
    1774:	9a a5       	ldd	r25, Y+42	; 0x2a
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a ef       	ldi	r20, 0xFA	; 250
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8b a3       	std	Y+35, r24	; 0x23
    1788:	9c a3       	std	Y+36, r25	; 0x24
    178a:	ad a3       	std	Y+37, r26	; 0x25
    178c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <LCD_sendCommand+0x160>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9a a3       	std	Y+34, r25	; 0x22
    17ac:	89 a3       	std	Y+33, r24	; 0x21
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17b0:	6b a1       	ldd	r22, Y+35	; 0x23
    17b2:	7c a1       	ldd	r23, Y+36	; 0x24
    17b4:	8d a1       	ldd	r24, Y+37	; 0x25
    17b6:	9e a1       	ldd	r25, Y+38	; 0x26
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	6f a1       	ldd	r22, Y+39	; 0x27
    17ca:	78 a5       	ldd	r23, Y+40	; 0x28
    17cc:	89 a5       	ldd	r24, Y+41	; 0x29
    17ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9a a3       	std	Y+34, r25	; 0x22
    17ee:	89 a3       	std	Y+33, r24	; 0x21
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <LCD_sendCommand+0x1c0>
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	98 a3       	std	Y+32, r25	; 0x20
    17f8:	8f 8f       	std	Y+31, r24	; 0x1f
    17fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17fc:	98 a1       	ldd	r25, Y+32	; 0x20
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <LCD_sendCommand+0x1ae>
    1802:	98 a3       	std	Y+32, r25	; 0x20
    1804:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	89 a1       	ldd	r24, Y+33	; 0x21
    1808:	9a a1       	ldd	r25, Y+34	; 0x22
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9a a3       	std	Y+34, r25	; 0x22
    180e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	89 a1       	ldd	r24, Y+33	; 0x21
    1812:	9a a1       	ldd	r25, Y+34	; 0x22
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <LCD_sendCommand+0x1a2>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6b a1       	ldd	r22, Y+35	; 0x23
    181c:	7c a1       	ldd	r23, Y+36	; 0x24
    181e:	8d a1       	ldd	r24, Y+37	; 0x25
    1820:	9e a1       	ldd	r25, Y+38	; 0x26
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	89 a1       	ldd	r24, Y+33	; 0x21
    1830:	9a a1       	ldd	r25, Y+34	; 0x22
    1832:	9e 8f       	std	Y+30, r25	; 0x1e
    1834:	8d 8f       	std	Y+29, r24	; 0x1d
    1836:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1838:	9e 8d       	ldd	r25, Y+30	; 0x1e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_sendCommand+0x1ea>
    183e:	9e 8f       	std	Y+30, r25	; 0x1e
    1840:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	69 ad       	ldd	r22, Y+57	; 0x39
    1846:	0e 94 03 0a 	call	0x1406	; 0x1406 <GPIO_writePort>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	89 8f       	std	Y+25, r24	; 0x19
    1854:	9a 8f       	std	Y+26, r25	; 0x1a
    1856:	ab 8f       	std	Y+27, r26	; 0x1b
    1858:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	69 8d       	ldd	r22, Y+25	; 0x19
    185c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a ef       	ldi	r20, 0xFA	; 250
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8d 8b       	std	Y+21, r24	; 0x15
    1874:	9e 8b       	std	Y+22, r25	; 0x16
    1876:	af 8b       	std	Y+23, r26	; 0x17
    1878:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    187a:	6d 89       	ldd	r22, Y+21	; 0x15
    187c:	7e 89       	ldd	r23, Y+22	; 0x16
    187e:	8f 89       	ldd	r24, Y+23	; 0x17
    1880:	98 8d       	ldd	r25, Y+24	; 0x18
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 8b       	std	Y+20, r25	; 0x14
    1898:	8b 8b       	std	Y+19, r24	; 0x13
    189a:	3f c0       	rjmp	.+126    	; 0x191a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    189c:	6d 89       	ldd	r22, Y+21	; 0x15
    189e:	7e 89       	ldd	r23, Y+22	; 0x16
    18a0:	8f 89       	ldd	r24, Y+23	; 0x17
    18a2:	98 8d       	ldd	r25, Y+24	; 0x18
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	8b 8b       	std	Y+19, r24	; 0x13
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <LCD_sendCommand+0x2ac>
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9a 8b       	std	Y+18, r25	; 0x12
    18e4:	89 8b       	std	Y+17, r24	; 0x11
    18e6:	89 89       	ldd	r24, Y+17	; 0x11
    18e8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_sendCommand+0x29a>
    18ee:	9a 8b       	std	Y+18, r25	; 0x12
    18f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f2:	8b 89       	ldd	r24, Y+19	; 0x13
    18f4:	9c 89       	ldd	r25, Y+20	; 0x14
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	9c 8b       	std	Y+20, r25	; 0x14
    18fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <LCD_sendCommand+0x28e>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1906:	6d 89       	ldd	r22, Y+21	; 0x15
    1908:	7e 89       	ldd	r23, Y+22	; 0x16
    190a:	8f 89       	ldd	r24, Y+23	; 0x17
    190c:	98 8d       	ldd	r25, Y+24	; 0x18
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	98 8b       	std	Y+16, r25	; 0x10
    1920:	8f 87       	std	Y+15, r24	; 0x0f
    1922:	8f 85       	ldd	r24, Y+15	; 0x0f
    1924:	98 89       	ldd	r25, Y+16	; 0x10
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_sendCommand+0x2d6>
    192a:	98 8b       	std	Y+16, r25	; 0x10
    192c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e8       	ldi	r26, 0x80	; 128
    193e:	bf e3       	ldi	r27, 0x3F	; 63
    1940:	8b 87       	std	Y+11, r24	; 0x0b
    1942:	9c 87       	std	Y+12, r25	; 0x0c
    1944:	ad 87       	std	Y+13, r26	; 0x0d
    1946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a ef       	ldi	r20, 0xFA	; 250
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8f 83       	std	Y+7, r24	; 0x07
    1962:	98 87       	std	Y+8, r25	; 0x08
    1964:	a9 87       	std	Y+9, r26	; 0x09
    1966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <LCD_sendCommand+0x39a>
    19cc:	88 ec       	ldi	r24, 0xC8	; 200
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9c 83       	std	Y+4, r25	; 0x04
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <LCD_sendCommand+0x388>
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <LCD_sendCommand+0x37c>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_sendCommand+0x3c4>
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a1c:	e9 96       	adiw	r28, 0x39	; 57
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	e9 97       	sbiw	r28, 0x39	; 57
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	8d ab       	std	Y+53, r24	; 0x35
    1a58:	9e ab       	std	Y+54, r25	; 0x36
    1a5a:	af ab       	std	Y+55, r26	; 0x37
    1a5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a60:	7e a9       	ldd	r23, Y+54	; 0x36
    1a62:	8f a9       	ldd	r24, Y+55	; 0x37
    1a64:	98 ad       	ldd	r25, Y+56	; 0x38
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	89 ab       	std	Y+49, r24	; 0x31
    1a78:	9a ab       	std	Y+50, r25	; 0x32
    1a7a:	ab ab       	std	Y+51, r26	; 0x33
    1a7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a80:	7a a9       	ldd	r23, Y+50	; 0x32
    1a82:	8b a9       	ldd	r24, Y+51	; 0x33
    1a84:	9c a9       	ldd	r25, Y+52	; 0x34
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_displayCharacter+0xd2>
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e a7       	std	Y+46, r25	; 0x2e
    1ae8:	8d a7       	std	Y+45, r24	; 0x2d
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_displayCharacter+0xc0>
    1af2:	9e a7       	std	Y+46, r25	; 0x2e
    1af4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af8:	98 a9       	ldd	r25, Y+48	; 0x30
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	98 ab       	std	Y+48, r25	; 0x30
    1afe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b02:	98 a9       	ldd	r25, Y+48	; 0x30
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_displayCharacter+0xb4>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	98 ab       	std	Y+48, r25	; 0x30
    1b1c:	8f a7       	std	Y+47, r24	; 0x2f
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	9c a7       	std	Y+44, r25	; 0x2c
    1b24:	8b a7       	std	Y+43, r24	; 0x2b
    1b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_displayCharacter+0xfc>
    1b2e:	9c a7       	std	Y+44, r25	; 0x2c
    1b30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e8       	ldi	r26, 0x80	; 128
    1b42:	bf e3       	ldi	r27, 0x3F	; 63
    1b44:	8f a3       	std	Y+39, r24	; 0x27
    1b46:	98 a7       	std	Y+40, r25	; 0x28
    1b48:	a9 a7       	std	Y+41, r26	; 0x29
    1b4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b50:	89 a5       	ldd	r24, Y+41	; 0x29
    1b52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a ef       	ldi	r20, 0xFA	; 250
    1b5a:	54 e4       	ldi	r21, 0x44	; 68
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8b a3       	std	Y+35, r24	; 0x23
    1b66:	9c a3       	std	Y+36, r25	; 0x24
    1b68:	ad a3       	std	Y+37, r26	; 0x25
    1b6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b70:	8d a1       	ldd	r24, Y+37	; 0x25
    1b72:	9e a1       	ldd	r25, Y+38	; 0x26
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9a a3       	std	Y+34, r25	; 0x22
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1b8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b90:	7c a1       	ldd	r23, Y+36	; 0x24
    1b92:	8d a1       	ldd	r24, Y+37	; 0x25
    1b94:	9e a1       	ldd	r25, Y+38	; 0x26
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    1baa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9a a3       	std	Y+34, r25	; 0x22
    1bcc:	89 a3       	std	Y+33, r24	; 0x21
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_displayCharacter+0x1c0>
    1bd0:	88 ec       	ldi	r24, 0xC8	; 200
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	98 a3       	std	Y+32, r25	; 0x20
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bda:	98 a1       	ldd	r25, Y+32	; 0x20
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_displayCharacter+0x1ae>
    1be0:	98 a3       	std	Y+32, r25	; 0x20
    1be2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	89 a1       	ldd	r24, Y+33	; 0x21
    1be6:	9a a1       	ldd	r25, Y+34	; 0x22
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9a a3       	std	Y+34, r25	; 0x22
    1bec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <LCD_displayCharacter+0x1a2>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	9e 8f       	std	Y+30, r25	; 0x1e
    1c12:	8d 8f       	std	Y+29, r24	; 0x1d
    1c14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_displayCharacter+0x1ea>
    1c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	69 ad       	ldd	r22, Y+57	; 0x39
    1c24:	0e 94 03 0a 	call	0x1406	; 0x1406 <GPIO_writePort>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e8       	ldi	r26, 0x80	; 128
    1c2e:	bf e3       	ldi	r27, 0x3F	; 63
    1c30:	89 8f       	std	Y+25, r24	; 0x19
    1c32:	9a 8f       	std	Y+26, r25	; 0x1a
    1c34:	ab 8f       	std	Y+27, r26	; 0x1b
    1c36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8d 8b       	std	Y+21, r24	; 0x15
    1c52:	9e 8b       	std	Y+22, r25	; 0x16
    1c54:	af 8b       	std	Y+23, r26	; 0x17
    1c56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c58:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c80:	98 8d       	ldd	r25, Y+24	; 0x18
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_displayCharacter+0x2ac>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
    1cc4:	89 89       	ldd	r24, Y+17	; 0x11
    1cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_displayCharacter+0x29a>
    1ccc:	9a 8b       	std	Y+18, r25	; 0x12
    1cce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8b 89       	ldd	r24, Y+19	; 0x13
    1cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <LCD_displayCharacter+0x28e>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	98 8b       	std	Y+16, r25	; 0x10
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	98 89       	ldd	r25, Y+16	; 0x10
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_displayCharacter+0x2d6>
    1d08:	98 8b       	std	Y+16, r25	; 0x10
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <LCD_displayCharacter+0x39a>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_displayCharacter+0x388>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <LCD_displayCharacter+0x37c>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_displayCharacter+0x3c4>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1dfa:	e9 96       	adiw	r28, 0x39	; 57
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	00 d0       	rcall	.+0      	; 0x1e12 <LCD_displayString+0x6>
    1e12:	0f 92       	push	r0
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	9b 83       	std	Y+3, r25	; 0x03
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e1c:	19 82       	std	Y+1, r1	; 0x01
    1e1e:	0e c0       	rjmp	.+28     	; 0x1e3c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	80 81       	ld	r24, Z
    1e32:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_displayCharacter>
		i++;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	8f 5f       	subi	r24, 0xFF	; 255
    1e3a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	fc 01       	movw	r30, r24
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 23       	and	r24, r24
    1e50:	39 f7       	brne	.-50     	; 0x1e20 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LCD_moveCursor+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_moveCursor+0x8>
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3d 83       	std	Y+5, r19	; 0x05
    1e78:	2c 83       	std	Y+4, r18	; 0x04
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	91 05       	cpc	r25, r1
    1e82:	c1 f0       	breq	.+48     	; 0x1eb4 <LCD_moveCursor+0x56>
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <LCD_moveCursor+0x3a>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	61 f0       	breq	.+24     	; 0x1eae <LCD_moveCursor+0x50>
    1e96:	19 c0       	rjmp	.+50     	; 0x1eca <LCD_moveCursor+0x6c>
    1e98:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	69 f0       	breq	.+26     	; 0x1ebc <LCD_moveCursor+0x5e>
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <LCD_moveCursor+0x66>
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	0b c0       	rjmp	.+22     	; 0x1eca <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	80 5c       	subi	r24, 0xC0	; 192
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	07 c0       	rjmp	.+14     	; 0x1eca <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	80 5f       	subi	r24, 0xF0	; 240
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	80 5b       	subi	r24, 0xB0	; 176
    1ec8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	80 68       	ori	r24, 0x80	; 128
    1ece:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <LCD_displayStringRowColumn+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <LCD_displayStringRowColumn+0x8>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	6a 83       	std	Y+2, r22	; 0x02
    1ef2:	5c 83       	std	Y+4, r21	; 0x04
    1ef4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    1efa:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	62 97       	sbiw	r28, 0x12	; 18
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9a 8b       	std	Y+18, r25	; 0x12
    1f2a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f2c:	89 89       	ldd	r24, Y+17	; 0x11
    1f2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f30:	9e 01       	movw	r18, r28
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	b9 01       	movw	r22, r18
    1f38:	4a e0       	ldi	r20, 0x0A	; 10
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	0e 94 13 19 	call	0x3226	; 0x3226 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
}
    1f48:	62 96       	adiw	r28, 0x12	; 18
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_sendCommand>
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <KEYPAD_getPressedKey>:
static uint8 col,row;



uint8 KEYPAD_getPressedKey(void)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	2e 97       	sbiw	r28, 0x0e	; 14
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61

	while(1)
	{
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	62 e0       	ldi	r22, 0x02	; 2
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	63 e0       	ldi	r22, 0x03	; 3
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>

				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	64 e0       	ldi	r22, 0x04	; 4
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	65 e0       	ldi	r22, 0x05	; 5
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	66 e0       	ldi	r22, 0x06	; 6
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
			#if(KEYPAD_NUM_COLS == 4)
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
			#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1fc8:	10 92 51 01 	sts	0x0151, r1
    1fcc:	bb c0       	rjmp	.+374    	; 0x2144 <KEYPAD_getPressedKey+0x1d6>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1fce:	90 91 51 01 	lds	r25, 0x0151
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	69 2f       	mov	r22, r25
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1fdc:	90 91 51 01 	lds	r25, 0x0151
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	69 2f       	mov	r22, r25
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fea:	10 92 50 01 	sts	0x0150, r1
    1fee:	28 c0       	rjmp	.+80     	; 0x2040 <KEYPAD_getPressedKey+0xd2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1ff0:	80 91 50 01 	lds	r24, 0x0150
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	9c 5f       	subi	r25, 0xFC	; 252
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	69 2f       	mov	r22, r25
    1ffc:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_readPin>
    2000:	88 23       	and	r24, r24
    2002:	c9 f4       	brne	.+50     	; 0x2036 <KEYPAD_getPressedKey+0xc8>
				{
					#if (KEYPAD_NUM_COLS == 3)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2004:	80 91 51 01 	lds	r24, 0x0151
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	c9 01       	movw	r24, r18
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	82 0f       	add	r24, r18
    2014:	93 1f       	adc	r25, r19
    2016:	98 2f       	mov	r25, r24
    2018:	80 91 50 01 	lds	r24, 0x0150
    201c:	89 0f       	add	r24, r25
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	0e 94 a8 10 	call	0x2150	; 0x2150 <KEYPAD_4x3_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2024:	2e 96       	adiw	r28, 0x0e	; 14
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2036:	80 91 50 01 	lds	r24, 0x0150
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	80 93 50 01 	sts	0x0150, r24
    2040:	80 91 50 01 	lds	r24, 0x0150
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	a0 f2       	brcs	.-88     	; 0x1ff0 <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2048:	90 91 51 01 	lds	r25, 0x0151
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	69 2f       	mov	r22, r25
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	0e 94 4e 07 	call	0xe9c	; 0xe9c <GPIO_setupPinDirection>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 ea       	ldi	r26, 0xA0	; 160
    205c:	b0 e4       	ldi	r27, 0x40	; 64
    205e:	8b 87       	std	Y+11, r24	; 0x0b
    2060:	9c 87       	std	Y+12, r25	; 0x0c
    2062:	ad 87       	std	Y+13, r26	; 0x0d
    2064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a ef       	ldi	r20, 0xFA	; 250
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8f 83       	std	Y+7, r24	; 0x07
    2080:	98 87       	std	Y+8, r25	; 0x08
    2082:	a9 87       	std	Y+9, r26	; 0x09
    2084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <KEYPAD_getPressedKey+0x13a>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <KEYPAD_getPressedKey+0x1b8>
	else if (__tmp > 65535)
    20a8:	6f 81       	ldd	r22, Y+7	; 0x07
    20aa:	78 85       	ldd	r23, Y+8	; 0x08
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <KEYPAD_getPressedKey+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <KEYPAD_getPressedKey+0x19a>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <KEYPAD_getPressedKey+0x188>
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <KEYPAD_getPressedKey+0x17c>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <KEYPAD_getPressedKey+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <KEYPAD_getPressedKey+0x1c4>
    2136:	9a 83       	std	Y+2, r25	; 0x02
    2138:	89 83       	std	Y+1, r24	; 0x01
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
			#if(KEYPAD_NUM_COLS == 4)
				GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
			#endif
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    213a:	80 91 51 01 	lds	r24, 0x0151
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 51 01 	sts	0x0151, r24
    2144:	80 91 51 01 	lds	r24, 0x0151
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	08 f4       	brcc	.+2      	; 0x214e <KEYPAD_getPressedKey+0x1e0>
    214c:	40 cf       	rjmp	.-384    	; 0x1fce <KEYPAD_getPressedKey+0x60>
    214e:	19 cf       	rjmp	.-462    	; 0x1f82 <KEYPAD_getPressedKey+0x14>

00002150 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <KEYPAD_4x3_adjustKeyNumber+0x6>
    2156:	00 d0       	rcall	.+0      	; 0x2158 <KEYPAD_4x3_adjustKeyNumber+0x8>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    215e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	3c 83       	std	Y+4, r19	; 0x04
    2168:	2b 83       	std	Y+3, r18	; 0x03
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	8a 30       	cpi	r24, 0x0A	; 10
    2170:	91 05       	cpc	r25, r1
    2172:	81 f0       	breq	.+32     	; 0x2194 <KEYPAD_4x3_adjustKeyNumber+0x44>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	2a 30       	cpi	r18, 0x0A	; 10
    217a:	31 05       	cpc	r19, r1
    217c:	9c f0       	brlt	.+38     	; 0x21a4 <KEYPAD_4x3_adjustKeyNumber+0x54>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	8b 30       	cpi	r24, 0x0B	; 11
    2184:	91 05       	cpc	r25, r1
    2186:	49 f0       	breq	.+18     	; 0x219a <KEYPAD_4x3_adjustKeyNumber+0x4a>
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	2c 30       	cpi	r18, 0x0C	; 12
    218e:	31 05       	cpc	r19, r1
    2190:	31 f0       	breq	.+12     	; 0x219e <KEYPAD_4x3_adjustKeyNumber+0x4e>
    2192:	08 c0       	rjmp	.+16     	; 0x21a4 <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    2194:	8a e2       	ldi	r24, 0x2A	; 42
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		case 11: keypad_button = 0;
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    219e:	83 e2       	ldi	r24, 0x23	; 35
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		default: keypad_button = button_number;
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <appInit>:




void appInit(void)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    21c0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <LCD_init>
	UART_init(9600);
    21c4:	60 e8       	ldi	r22, 0x80	; 128
    21c6:	75 e2       	ldi	r23, 0x25	; 37
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	SREG|=(1<<7);
    21d0:	af e5       	ldi	r26, 0x5F	; 95
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ef e5       	ldi	r30, 0x5F	; 95
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 68       	ori	r24, 0x80	; 128
    21dc:	8c 93       	st	X, r24
}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <getNewPassword>:


void getNewPassword(uint8 *password,uint8 *reenterted_password,uint8 length)
{
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	a5 97       	sbiw	r28, 0x25	; 37
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	9a a3       	std	Y+34, r25	; 0x22
    21fe:	89 a3       	std	Y+33, r24	; 0x21
    2200:	7c a3       	std	Y+36, r23	; 0x24
    2202:	6b a3       	std	Y+35, r22	; 0x23
    2204:	4d a3       	std	Y+37, r20	; 0x25
	LCD_clearScreen();
    2206:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("ENTER NEW PASS");
    2212:	80 e6       	ldi	r24, 0x60	; 96
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>

	/* entering a password*/
	for(int i=0;i<length;i++)
    221a:	18 a2       	std	Y+32, r1	; 0x20
    221c:	1f 8e       	std	Y+31, r1	; 0x1f
    221e:	8b c0       	rjmp	.+278    	; 0x2336 <getNewPassword+0x152>
	{
		password[i] =KEYPAD_getPressedKey()+48; // store number in array
    2220:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2222:	38 a1       	ldd	r19, Y+32	; 0x20
    2224:	89 a1       	ldd	r24, Y+33	; 0x21
    2226:	9a a1       	ldd	r25, Y+34	; 0x22
    2228:	8c 01       	movw	r16, r24
    222a:	02 0f       	add	r16, r18
    222c:	13 1f       	adc	r17, r19
    222e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <KEYPAD_getPressedKey>
    2232:	80 5d       	subi	r24, 0xD0	; 208
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	aa ef       	ldi	r26, 0xFA	; 250
    223e:	b3 e4       	ldi	r27, 0x43	; 67
    2240:	89 8f       	std	Y+25, r24	; 0x19
    2242:	9a 8f       	std	Y+26, r25	; 0x1a
    2244:	ab 8f       	std	Y+27, r26	; 0x1b
    2246:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	69 8d       	ldd	r22, Y+25	; 0x19
    224a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a ef       	ldi	r20, 0xFA	; 250
    2256:	54 e4       	ldi	r21, 0x44	; 68
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8d 8b       	std	Y+21, r24	; 0x15
    2262:	9e 8b       	std	Y+22, r25	; 0x16
    2264:	af 8b       	std	Y+23, r26	; 0x17
    2266:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2268:	6d 89       	ldd	r22, Y+21	; 0x15
    226a:	7e 89       	ldd	r23, Y+22	; 0x16
    226c:	8f 89       	ldd	r24, Y+23	; 0x17
    226e:	98 8d       	ldd	r25, Y+24	; 0x18
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <getNewPassword+0xa6>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <getNewPassword+0x124>
	else if (__tmp > 65535)
    228a:	6d 89       	ldd	r22, Y+21	; 0x15
    228c:	7e 89       	ldd	r23, Y+22	; 0x16
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <getNewPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	69 8d       	ldd	r22, Y+25	; 0x19
    22a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9c 8b       	std	Y+20, r25	; 0x14
    22c8:	8b 8b       	std	Y+19, r24	; 0x13
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <getNewPassword+0x106>
    22cc:	88 ec       	ldi	r24, 0xC8	; 200
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9a 8b       	std	Y+18, r25	; 0x12
    22d2:	89 8b       	std	Y+17, r24	; 0x11
    22d4:	89 89       	ldd	r24, Y+17	; 0x11
    22d6:	9a 89       	ldd	r25, Y+18	; 0x12
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <getNewPassword+0xf4>
    22dc:	9a 8b       	std	Y+18, r25	; 0x12
    22de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8b 89       	ldd	r24, Y+19	; 0x13
    22e2:	9c 89       	ldd	r25, Y+20	; 0x14
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8b 89       	ldd	r24, Y+19	; 0x13
    22ec:	9c 89       	ldd	r25, Y+20	; 0x14
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <getNewPassword+0xe8>
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <getNewPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6d 89       	ldd	r22, Y+21	; 0x15
    22f6:	7e 89       	ldd	r23, Y+22	; 0x16
    22f8:	8f 89       	ldd	r24, Y+23	; 0x17
    22fa:	98 8d       	ldd	r25, Y+24	; 0x18
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	98 8b       	std	Y+16, r25	; 0x10
    230e:	8f 87       	std	Y+15, r24	; 0x0f
    2310:	8f 85       	ldd	r24, Y+15	; 0x0f
    2312:	98 89       	ldd	r25, Y+16	; 0x10
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <getNewPassword+0x130>
    2318:	98 8b       	std	Y+16, r25	; 0x10
    231a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); // key press time delay
		LCD_moveCursor(1,i); // move to nxt line
    231c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	69 2f       	mov	r22, r25
    2322:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
		LCD_displayCharacter('*'); // write '*'
    2326:	8a e2       	ldi	r24, 0x2A	; 42
    2328:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("ENTER NEW PASS");

	/* entering a password*/
	for(int i=0;i<length;i++)
    232c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232e:	98 a1       	ldd	r25, Y+32	; 0x20
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	98 a3       	std	Y+32, r25	; 0x20
    2334:	8f 8f       	std	Y+31, r24	; 0x1f
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    233e:	98 a1       	ldd	r25, Y+32	; 0x20
    2340:	82 17       	cp	r24, r18
    2342:	93 07       	cpc	r25, r19
    2344:	0c f4       	brge	.+2      	; 0x2348 <getNewPassword+0x164>
    2346:	6c cf       	rjmp	.-296    	; 0x2220 <getNewPassword+0x3c>
		LCD_moveCursor(1,i); // move to nxt line
		LCD_displayCharacter('*'); // write '*'
	}

	/* rentering the password and checking if both match */
	LCD_clearScreen();
    2348:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("RE-ENTER PASS");
    2354:	8f e6       	ldi	r24, 0x6F	; 111
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
	for(int i=0;i<length;i++)
    235c:	1e 8e       	std	Y+30, r1	; 0x1e
    235e:	1d 8e       	std	Y+29, r1	; 0x1d
    2360:	8b c0       	rjmp	.+278    	; 0x2478 <getNewPassword+0x294>
		{
		reenterted_password[i]=KEYPAD_getPressedKey()+48;
    2362:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2364:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2366:	8b a1       	ldd	r24, Y+35	; 0x23
    2368:	9c a1       	ldd	r25, Y+36	; 0x24
    236a:	8c 01       	movw	r16, r24
    236c:	02 0f       	add	r16, r18
    236e:	13 1f       	adc	r17, r19
    2370:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <KEYPAD_getPressedKey>
    2374:	80 5d       	subi	r24, 0xD0	; 208
    2376:	f8 01       	movw	r30, r16
    2378:	80 83       	st	Z, r24
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	aa ef       	ldi	r26, 0xFA	; 250
    2380:	b3 e4       	ldi	r27, 0x43	; 67
    2382:	8b 87       	std	Y+11, r24	; 0x0b
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	ad 87       	std	Y+13, r26	; 0x0d
    2388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6b 85       	ldd	r22, Y+11	; 0x0b
    238c:	7c 85       	ldd	r23, Y+12	; 0x0c
    238e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2390:	9e 85       	ldd	r25, Y+14	; 0x0e
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8f 83       	std	Y+7, r24	; 0x07
    23a4:	98 87       	std	Y+8, r25	; 0x08
    23a6:	a9 87       	std	Y+9, r26	; 0x09
    23a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23aa:	6f 81       	ldd	r22, Y+7	; 0x07
    23ac:	78 85       	ldd	r23, Y+8	; 0x08
    23ae:	89 85       	ldd	r24, Y+9	; 0x09
    23b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <getNewPassword+0x1e8>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <getNewPassword+0x266>
	else if (__tmp > 65535)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <getNewPassword+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	0f c0       	rjmp	.+30     	; 0x242c <getNewPassword+0x248>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <getNewPassword+0x236>
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <getNewPassword+0x22a>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <getNewPassword+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	9e 81       	ldd	r25, Y+6	; 0x06
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <getNewPassword+0x272>
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_moveCursor(1,i);
    245e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	69 2f       	mov	r22, r25
    2464:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
			LCD_displayCharacter('*');
    2468:	8a e2       	ldi	r24, 0x2A	; 42
    246a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_displayCharacter>

	/* rentering the password and checking if both match */
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("RE-ENTER PASS");
	for(int i=0;i<length;i++)
    246e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2482:	82 17       	cp	r24, r18
    2484:	93 07       	cpc	r25, r19
    2486:	0c f4       	brge	.+2      	; 0x248a <getNewPassword+0x2a6>
    2488:	6c cf       	rjmp	.-296    	; 0x2362 <getNewPassword+0x17e>
			LCD_displayCharacter('*');
			// check if characters match

		}

}
    248a:	a5 96       	adiw	r28, 0x25	; 37
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <sendPasswordToController>:

void sendPasswordToController(uint8 *password,uint8 length)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <sendPasswordToController+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <sendPasswordToController+0x8>
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
    24b2:	6d 83       	std	Y+5, r22	; 0x05
	for(int i=0;i<length;i++)
    24b4:	1a 82       	std	Y+2, r1	; 0x02
    24b6:	19 82       	std	Y+1, r1	; 0x01
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <sendPasswordToController+0x38>
		{
		 UART_sendByte(password[i]);
    24ba:	29 81       	ldd	r18, Y+1	; 0x01
    24bc:	3a 81       	ldd	r19, Y+2	; 0x02
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	fc 01       	movw	r30, r24
    24c4:	e2 0f       	add	r30, r18
    24c6:	f3 1f       	adc	r31, r19
    24c8:	80 81       	ld	r24, Z
    24ca:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>

}

void sendPasswordToController(uint8 *password,uint8 length)
{
	for(int i=0;i<length;i++)
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	82 17       	cp	r24, r18
    24e4:	93 07       	cpc	r25, r19
    24e6:	4c f3       	brlt	.-46     	; 0x24ba <sendPasswordToController+0x1a>
		{
		 UART_sendByte(password[i]);

		}

}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <displaySystemOptions>:



void displaySystemOptions(void)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2500:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("*: Open The Door");
    250c:	8d e7       	ldi	r24, 0x7D	; 125
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
	LCD_moveCursor(1,0);
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("#: Change Pass");
    251c:	8e e8       	ldi	r24, 0x8E	; 142
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>

}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <recieveControllerDecision>:

uint8 recieveControllerDecision(void)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
	uint8 decision=UART_recieveByte();
    2534:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2538:	89 83       	std	Y+1, r24	; 0x01
	return decision;
    253a:	89 81       	ldd	r24, Y+1	; 0x01
}
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <displayPasswordFormatError>:

void displayPasswordFormatError(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	2e 97       	sbiw	r28, 0x0e	; 14
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2558:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
		LCD_moveCursor(0,0);
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
		LCD_displayString("Error");
    2564:	8d e9       	ldi	r24, 0x9D	; 157
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
		LCD_moveCursor(1,0);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
		LCD_displayString("choose num bet");
    2574:	83 ea       	ldi	r24, 0xA3	; 163
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
		LCD_moveCursor(2,0);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
		LCD_displayString("0-9");
    2584:	82 eb       	ldi	r24, 0xB2	; 178
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	aa ef       	ldi	r26, 0xFA	; 250
    2592:	b4 e4       	ldi	r27, 0x44	; 68
    2594:	8b 87       	std	Y+11, r24	; 0x0b
    2596:	9c 87       	std	Y+12, r25	; 0x0c
    2598:	ad 87       	std	Y+13, r26	; 0x0d
    259a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6b 85       	ldd	r22, Y+11	; 0x0b
    259e:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8f 83       	std	Y+7, r24	; 0x07
    25b6:	98 87       	std	Y+8, r25	; 0x08
    25b8:	a9 87       	std	Y+9, r26	; 0x09
    25ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <displayPasswordFormatError+0x9a>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <displayPasswordFormatError+0x118>
	else if (__tmp > 65535)
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	78 85       	ldd	r23, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <displayPasswordFormatError+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	0f c0       	rjmp	.+30     	; 0x263e <displayPasswordFormatError+0xfa>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <displayPasswordFormatError+0xe8>
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <displayPasswordFormatError+0xdc>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <displayPasswordFormatError+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <displayPasswordFormatError+0x124>
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);

}
    2670:	2e 96       	adiw	r28, 0x0e	; 14
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <displayPasswordCompareError>:

void displayPasswordCompareError(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	2e 97       	sbiw	r28, 0x0e	; 14
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2696:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Error");
    26a2:	8d e9       	ldi	r24, 0x9D	; 157
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
	LCD_moveCursor(1,0);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Pass Don't Match");
    26b2:	86 eb       	ldi	r24, 0xB6	; 182
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	aa ef       	ldi	r26, 0xFA	; 250
    26c0:	b4 e4       	ldi	r27, 0x44	; 68
    26c2:	8b 87       	std	Y+11, r24	; 0x0b
    26c4:	9c 87       	std	Y+12, r25	; 0x0c
    26c6:	ad 87       	std	Y+13, r26	; 0x0d
    26c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    26cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a ef       	ldi	r20, 0xFA	; 250
    26d8:	54 e4       	ldi	r21, 0x44	; 68
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	8f 83       	std	Y+7, r24	; 0x07
    26e4:	98 87       	std	Y+8, r25	; 0x08
    26e6:	a9 87       	std	Y+9, r26	; 0x09
    26e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ea:	6f 81       	ldd	r22, Y+7	; 0x07
    26ec:	78 85       	ldd	r23, Y+8	; 0x08
    26ee:	89 85       	ldd	r24, Y+9	; 0x09
    26f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fe:	88 23       	and	r24, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <displayPasswordCompareError+0x8a>
		__ticks = 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9e 83       	std	Y+6, r25	; 0x06
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	3f c0       	rjmp	.+126    	; 0x278a <displayPasswordCompareError+0x108>
	else if (__tmp > 65535)
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2720:	18 16       	cp	r1, r24
    2722:	4c f5       	brge	.+82     	; 0x2776 <displayPasswordCompareError+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	6b 85       	ldd	r22, Y+11	; 0x0b
    2726:	7c 85       	ldd	r23, Y+12	; 0x0c
    2728:	8d 85       	ldd	r24, Y+13	; 0x0d
    272a:	9e 85       	ldd	r25, Y+14	; 0x0e
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9e 83       	std	Y+6, r25	; 0x06
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	0f c0       	rjmp	.+30     	; 0x276c <displayPasswordCompareError+0xea>
    274e:	88 ec       	ldi	r24, 0xC8	; 200
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9c 83       	std	Y+4, r25	; 0x04
    2754:	8b 83       	std	Y+3, r24	; 0x03
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <displayPasswordCompareError+0xd8>
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	69 f7       	brne	.-38     	; 0x274e <displayPasswordCompareError+0xcc>
    2774:	14 c0       	rjmp	.+40     	; 0x279e <displayPasswordCompareError+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2776:	6f 81       	ldd	r22, Y+7	; 0x07
    2778:	78 85       	ldd	r23, Y+8	; 0x08
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	9a 85       	ldd	r25, Y+10	; 0x0a
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9e 83       	std	Y+6, r25	; 0x06
    2788:	8d 83       	std	Y+5, r24	; 0x05
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <displayPasswordCompareError+0x114>
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

}
    279e:	2e 96       	adiw	r28, 0x0e	; 14
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <displayPasswordChanged>:

void displayPasswordChanged(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	2e 97       	sbiw	r28, 0x0e	; 14
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    27c4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Password changed");
    27d0:	87 ec       	ldi	r24, 0xC7	; 199
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	aa ef       	ldi	r26, 0xFA	; 250
    27de:	b4 e4       	ldi	r27, 0x44	; 68
    27e0:	8b 87       	std	Y+11, r24	; 0x0b
    27e2:	9c 87       	std	Y+12, r25	; 0x0c
    27e4:	ad 87       	std	Y+13, r26	; 0x0d
    27e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	8f 83       	std	Y+7, r24	; 0x07
    2802:	98 87       	std	Y+8, r25	; 0x08
    2804:	a9 87       	std	Y+9, r26	; 0x09
    2806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <displayPasswordChanged+0x7a>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <displayPasswordChanged+0xf8>
	else if (__tmp > 65535)
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <displayPasswordChanged+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	0f c0       	rjmp	.+30     	; 0x288a <displayPasswordChanged+0xda>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	8b 83       	std	Y+3, r24	; 0x03
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <displayPasswordChanged+0xc8>
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <displayPasswordChanged+0xbc>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <displayPasswordChanged+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	6f 81       	ldd	r22, Y+7	; 0x07
    2896:	78 85       	ldd	r23, Y+8	; 0x08
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <displayPasswordChanged+0x104>
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    28bc:	2e 96       	adiw	r28, 0x0e	; 14
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <displayDoorState>:


void displayDoorState(void)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	aa 97       	sbiw	r28, 0x2a	; 42
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    28e2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Door Opening...");
    28ee:	88 ed       	ldi	r24, 0xD8	; 216
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e4       	ldi	r25, 0x40	; 64
    28fa:	ac e9       	ldi	r26, 0x9C	; 156
    28fc:	b5 e4       	ldi	r27, 0x45	; 69
    28fe:	8f a3       	std	Y+39, r24	; 0x27
    2900:	98 a7       	std	Y+40, r25	; 0x28
    2902:	a9 a7       	std	Y+41, r26	; 0x29
    2904:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	6f a1       	ldd	r22, Y+39	; 0x27
    2908:	78 a5       	ldd	r23, Y+40	; 0x28
    290a:	89 a5       	ldd	r24, Y+41	; 0x29
    290c:	9a a5       	ldd	r25, Y+42	; 0x2a
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a ef       	ldi	r20, 0xFA	; 250
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8b a3       	std	Y+35, r24	; 0x23
    2920:	9c a3       	std	Y+36, r25	; 0x24
    2922:	ad a3       	std	Y+37, r26	; 0x25
    2924:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2926:	6b a1       	ldd	r22, Y+35	; 0x23
    2928:	7c a1       	ldd	r23, Y+36	; 0x24
    292a:	8d a1       	ldd	r24, Y+37	; 0x25
    292c:	9e a1       	ldd	r25, Y+38	; 0x26
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <displayDoorState+0x7a>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9a a3       	std	Y+34, r25	; 0x22
    2944:	89 a3       	std	Y+33, r24	; 0x21
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <displayDoorState+0xf8>
	else if (__tmp > 65535)
    2948:	6b a1       	ldd	r22, Y+35	; 0x23
    294a:	7c a1       	ldd	r23, Y+36	; 0x24
    294c:	8d a1       	ldd	r24, Y+37	; 0x25
    294e:	9e a1       	ldd	r25, Y+38	; 0x26
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <displayDoorState+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	6f a1       	ldd	r22, Y+39	; 0x27
    2962:	78 a5       	ldd	r23, Y+40	; 0x28
    2964:	89 a5       	ldd	r24, Y+41	; 0x29
    2966:	9a a5       	ldd	r25, Y+42	; 0x2a
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9a a3       	std	Y+34, r25	; 0x22
    2986:	89 a3       	std	Y+33, r24	; 0x21
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <displayDoorState+0xda>
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	98 a3       	std	Y+32, r25	; 0x20
    2990:	8f 8f       	std	Y+31, r24	; 0x1f
    2992:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2994:	98 a1       	ldd	r25, Y+32	; 0x20
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <displayDoorState+0xc8>
    299a:	98 a3       	std	Y+32, r25	; 0x20
    299c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	89 a1       	ldd	r24, Y+33	; 0x21
    29a0:	9a a1       	ldd	r25, Y+34	; 0x22
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9a a3       	std	Y+34, r25	; 0x22
    29a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	89 a1       	ldd	r24, Y+33	; 0x21
    29aa:	9a a1       	ldd	r25, Y+34	; 0x22
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <displayDoorState+0xbc>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <displayDoorState+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6b a1       	ldd	r22, Y+35	; 0x23
    29b4:	7c a1       	ldd	r23, Y+36	; 0x24
    29b6:	8d a1       	ldd	r24, Y+37	; 0x25
    29b8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9a a3       	std	Y+34, r25	; 0x22
    29c4:	89 a3       	std	Y+33, r24	; 0x21
    29c6:	89 a1       	ldd	r24, Y+33	; 0x21
    29c8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ca:	9e 8f       	std	Y+30, r25	; 0x1e
    29cc:	8d 8f       	std	Y+29, r24	; 0x1d
    29ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <displayDoorState+0x104>
    29d6:	9e 8f       	std	Y+30, r25	; 0x1e
    29d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DISPLAY_DELAY);
	LCD_clearScreen();
    29da:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Door Open !");
    29e6:	88 ee       	ldi	r24, 0xE8	; 232
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
	LCD_moveCursor(1,0);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Welcome Home ^_^");
    29f6:	84 ef       	ldi	r24, 0xF4	; 244
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e4       	ldi	r25, 0x40	; 64
    2a02:	ac e9       	ldi	r26, 0x9C	; 156
    2a04:	b5 e4       	ldi	r27, 0x45	; 69
    2a06:	89 8f       	std	Y+25, r24	; 0x19
    2a08:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8d 8b       	std	Y+21, r24	; 0x15
    2a28:	9e 8b       	std	Y+22, r25	; 0x16
    2a2a:	af 8b       	std	Y+23, r26	; 0x17
    2a2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <displayDoorState+0x182>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 8b       	std	Y+20, r25	; 0x14
    2a4c:	8b 8b       	std	Y+19, r24	; 0x13
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <displayDoorState+0x200>
	else if (__tmp > 65535)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <displayDoorState+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <displayDoorState+0x1e2>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a 8b       	std	Y+18, r25	; 0x12
    2a98:	89 8b       	std	Y+17, r24	; 0x11
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <displayDoorState+0x1d0>
    2aa2:	9a 8b       	std	Y+18, r25	; 0x12
    2aa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <displayDoorState+0x1c4>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <displayDoorState+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6d 89       	ldd	r22, Y+21	; 0x15
    2abc:	7e 89       	ldd	r23, Y+22	; 0x16
    2abe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	98 8b       	std	Y+16, r25	; 0x10
    2ad4:	8f 87       	std	Y+15, r24	; 0x0f
    2ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad8:	98 89       	ldd	r25, Y+16	; 0x10
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <displayDoorState+0x20c>
    2ade:	98 8b       	std	Y+16, r25	; 0x10
    2ae0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DISPLAY_DELAY);
	LCD_clearScreen();
    2ae2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Door closing...");
    2aee:	85 e0       	ldi	r24, 0x05	; 5
    2af0:	91 e0       	ldi	r25, 0x01	; 1
    2af2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e4       	ldi	r25, 0x40	; 64
    2afa:	ac e9       	ldi	r26, 0x9C	; 156
    2afc:	b5 e4       	ldi	r27, 0x45	; 69
    2afe:	8b 87       	std	Y+11, r24	; 0x0b
    2b00:	9c 87       	std	Y+12, r25	; 0x0c
    2b02:	ad 87       	std	Y+13, r26	; 0x0d
    2b04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a ef       	ldi	r20, 0xFA	; 250
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
    2b20:	98 87       	std	Y+8, r25	; 0x08
    2b22:	a9 87       	std	Y+9, r26	; 0x09
    2b24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b26:	6f 81       	ldd	r22, Y+7	; 0x07
    2b28:	78 85       	ldd	r23, Y+8	; 0x08
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <displayDoorState+0x27a>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <displayDoorState+0x2f8>
	else if (__tmp > 65535)
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <displayDoorState+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9e 83       	std	Y+6, r25	; 0x06
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <displayDoorState+0x2da>
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9c 83       	std	Y+4, r25	; 0x04
    2b90:	8b 83       	std	Y+3, r24	; 0x03
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	9c 81       	ldd	r25, Y+4	; 0x04
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <displayDoorState+0x2c8>
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <displayDoorState+0x2bc>
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <displayDoorState+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb4:	78 85       	ldd	r23, Y+8	; 0x08
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <displayDoorState+0x304>
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(DISPLAY_DELAY);
}
    2bda:	aa 96       	adiw	r28, 0x2a	; 42
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <StatusAck>:

void StatusAck (uint8 status)
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	0f 92       	push	r0
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(status);
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
}
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <getUserRequest>:

uint8 getUserRequest(void)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	2f 97       	sbiw	r28, 0x0f	; 15
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
	uint8 input=KEYPAD_getPressedKey();
    2c1a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <KEYPAD_getPressedKey>
    2c1e:	8f 87       	std	Y+15, r24	; 0x0f
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	aa ef       	ldi	r26, 0xFA	; 250
    2c26:	b3 e4       	ldi	r27, 0x43	; 67
    2c28:	8b 87       	std	Y+11, r24	; 0x0b
    2c2a:	9c 87       	std	Y+12, r25	; 0x0c
    2c2c:	ad 87       	std	Y+13, r26	; 0x0d
    2c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a ef       	ldi	r20, 0xFA	; 250
    2c3e:	54 e4       	ldi	r21, 0x44	; 68
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8f 83       	std	Y+7, r24	; 0x07
    2c4a:	98 87       	std	Y+8, r25	; 0x08
    2c4c:	a9 87       	std	Y+9, r26	; 0x09
    2c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c50:	6f 81       	ldd	r22, Y+7	; 0x07
    2c52:	78 85       	ldd	r23, Y+8	; 0x08
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <getUserRequest+0x6c>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	3f c0       	rjmp	.+126    	; 0x2cf0 <getUserRequest+0xea>
	else if (__tmp > 65535)
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	4c f5       	brge	.+82     	; 0x2cdc <getUserRequest+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	8d 83       	std	Y+5, r24	; 0x05
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <getUserRequest+0xcc>
    2cb4:	88 ec       	ldi	r24, 0xC8	; 200
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <getUserRequest+0xba>
    2cc4:	9c 83       	std	Y+4, r25	; 0x04
    2cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <getUserRequest+0xae>
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <getUserRequest+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cde:	78 85       	ldd	r23, Y+8	; 0x08
    2ce0:	89 85       	ldd	r24, Y+9	; 0x09
    2ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <getUserRequest+0xf6>
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return input;
    2d04:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2d06:	2f 96       	adiw	r28, 0x0f	; 15
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <sendRequestToController>:

void sendRequestToController(uint8 request)
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(request);
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
}
    2d2a:	0f 90       	pop	r0
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <getEnterPassword>:

void getEnterPassword(uint8 *password,uint8 length)
{
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	63 97       	sbiw	r28, 0x13	; 19
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	9a 8b       	std	Y+18, r25	; 0x12
    2d4c:	89 8b       	std	Y+17, r24	; 0x11
    2d4e:	6b 8b       	std	Y+19, r22	; 0x13
	LCD_clearScreen();
    2d50:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Enter Password");
    2d5c:	85 e1       	ldi	r24, 0x15	; 21
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
		for(int i=0;i<length;i++)
    2d64:	18 8a       	std	Y+16, r1	; 0x10
    2d66:	1f 86       	std	Y+15, r1	; 0x0f
    2d68:	8b c0       	rjmp	.+278    	; 0x2e80 <getEnterPassword+0x14e>
			{
			password[i]=KEYPAD_getPressedKey()+48;
    2d6a:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d6c:	38 89       	ldd	r19, Y+16	; 0x10
    2d6e:	89 89       	ldd	r24, Y+17	; 0x11
    2d70:	9a 89       	ldd	r25, Y+18	; 0x12
    2d72:	8c 01       	movw	r16, r24
    2d74:	02 0f       	add	r16, r18
    2d76:	13 1f       	adc	r17, r19
    2d78:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <KEYPAD_getPressedKey>
    2d7c:	80 5d       	subi	r24, 0xD0	; 208
    2d7e:	f8 01       	movw	r30, r16
    2d80:	80 83       	st	Z, r24
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	aa ef       	ldi	r26, 0xFA	; 250
    2d88:	b3 e4       	ldi	r27, 0x43	; 67
    2d8a:	8b 87       	std	Y+11, r24	; 0x0b
    2d8c:	9c 87       	std	Y+12, r25	; 0x0c
    2d8e:	ad 87       	std	Y+13, r26	; 0x0d
    2d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	4a ef       	ldi	r20, 0xFA	; 250
    2da0:	54 e4       	ldi	r21, 0x44	; 68
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8f 83       	std	Y+7, r24	; 0x07
    2dac:	98 87       	std	Y+8, r25	; 0x08
    2dae:	a9 87       	std	Y+9, r26	; 0x09
    2db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	2c f4       	brge	.+10     	; 0x2dd4 <getEnterPassword+0xa2>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	3f c0       	rjmp	.+126    	; 0x2e52 <getEnterPassword+0x120>
	else if (__tmp > 65535)
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	3f ef       	ldi	r19, 0xFF	; 255
    2de0:	4f e7       	ldi	r20, 0x7F	; 127
    2de2:	57 e4       	ldi	r21, 0x47	; 71
    2de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	4c f5       	brge	.+82     	; 0x2e3e <getEnterPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e2       	ldi	r20, 0x20	; 32
    2dfa:	51 e4       	ldi	r21, 0x41	; 65
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <getEnterPassword+0x102>
    2e16:	88 ec       	ldi	r24, 0xC8	; 200
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	9c 81       	ldd	r25, Y+4	; 0x04
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <getEnterPassword+0xf0>
    2e26:	9c 83       	std	Y+4, r25	; 0x04
    2e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <getEnterPassword+0xe4>
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <getEnterPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <getEnterPassword+0x12c>
    2e62:	9a 83       	std	Y+2, r25	; 0x02
    2e64:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_moveCursor(1,i);
    2e66:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	69 2f       	mov	r22, r25
    2e6c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
			LCD_displayCharacter('*');
    2e70:	8a e2       	ldi	r24, 0x2A	; 42
    2e72:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_displayCharacter>
void getEnterPassword(uint8 *password,uint8 length)
{
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("Enter Password");
		for(int i=0;i<length;i++)
    2e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e78:	98 89       	ldd	r25, Y+16	; 0x10
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	98 8b       	std	Y+16, r25	; 0x10
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e88:	98 89       	ldd	r25, Y+16	; 0x10
    2e8a:	82 17       	cp	r24, r18
    2e8c:	93 07       	cpc	r25, r19
    2e8e:	0c f4       	brge	.+2      	; 0x2e92 <getEnterPassword+0x160>
    2e90:	6c cf       	rjmp	.-296    	; 0x2d6a <getEnterPassword+0x38>
			_delay_ms(500);
			LCD_moveCursor(1,i);
			LCD_displayCharacter('*');
			}

}
    2e92:	63 96       	adiw	r28, 0x13	; 19
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <waitForController>:

void waitForController(void)
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	0f 92       	push	r0
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
	uint8 status=  UART_recieveByte();
    2eb2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2eb6:	89 83       	std	Y+1, r24	; 0x01

}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <sendHMIStatus>:

void sendHMIStatus(uint8 status)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	0f 92       	push	r0
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(status);
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
}
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <displaySecurityAlarm>:
void displaySecurityAlarm(void)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	2e 97       	sbiw	r28, 0x0e	; 14
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2eee:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Security ALARM !");
    2efa:	84 e2       	ldi	r24, 0x24	; 36
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
	LCD_moveCursor(1,0);
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_moveCursor>
	LCD_displayString("Who Are You -_-");
    2f0a:	85 e3       	ldi	r24, 0x35	; 53
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_displayString>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e4       	ldi	r25, 0x40	; 64
    2f16:	ac e1       	ldi	r26, 0x1C	; 28
    2f18:	b6 e4       	ldi	r27, 0x46	; 70
    2f1a:	8b 87       	std	Y+11, r24	; 0x0b
    2f1c:	9c 87       	std	Y+12, r25	; 0x0c
    2f1e:	ad 87       	std	Y+13, r26	; 0x0d
    2f20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a ef       	ldi	r20, 0xFA	; 250
    2f30:	54 e4       	ldi	r21, 0x44	; 68
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	8f 83       	std	Y+7, r24	; 0x07
    2f3c:	98 87       	std	Y+8, r25	; 0x08
    2f3e:	a9 87       	std	Y+9, r26	; 0x09
    2f40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e8       	ldi	r20, 0x80	; 128
    2f50:	5f e3       	ldi	r21, 0x3F	; 63
    2f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f56:	88 23       	and	r24, r24
    2f58:	2c f4       	brge	.+10     	; 0x2f64 <displaySecurityAlarm+0x8a>
		__ticks = 1;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	3f c0       	rjmp	.+126    	; 0x2fe2 <displaySecurityAlarm+0x108>
	else if (__tmp > 65535)
    2f64:	6f 81       	ldd	r22, Y+7	; 0x07
    2f66:	78 85       	ldd	r23, Y+8	; 0x08
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f e7       	ldi	r20, 0x7F	; 127
    2f72:	57 e4       	ldi	r21, 0x47	; 71
    2f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f78:	18 16       	cp	r1, r24
    2f7a:	4c f5       	brge	.+82     	; 0x2fce <displaySecurityAlarm+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	51 e4       	ldi	r21, 0x41	; 65
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <displaySecurityAlarm+0xea>
    2fa6:	88 ec       	ldi	r24, 0xC8	; 200
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <displaySecurityAlarm+0xd8>
    2fb6:	9c 83       	std	Y+4, r25	; 0x04
    2fb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	9e 83       	std	Y+6, r25	; 0x06
    2fc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <displaySecurityAlarm+0xcc>
    2fcc:	14 c0       	rjmp	.+40     	; 0x2ff6 <displaySecurityAlarm+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd0:	78 85       	ldd	r23, Y+8	; 0x08
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <displaySecurityAlarm+0x114>
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);
}
    2ff6:	2e 96       	adiw	r28, 0x0e	; 14
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <main>:
#define Open_DOOR_REQ_ID                          'G'
#define CHANGE_PASSWORD_REQ_ID                    'H'
#define UART_DELAY                                 150

int main()
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	2e 97       	sbiw	r28, 0x0e	; 14
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
	 appInit();
    301c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <appInit>
	 uint8 password[PASSWORD_LENGTH];
	 uint8 reentertedPAssword[PASSWORD_LENGTH];
	 uint8 controllerOrder=DISPLAY_GET_NEW_PASSWORD_SEQUENCE; // controller requested order
    3020:	84 e4       	ldi	r24, 0x44	; 68
    3022:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 userRequest;
	 sendHMIStatus(HMI_WAITING);
    3024:	8e e4       	ldi	r24, 0x4E	; 78
    3026:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
	 while(1)
	 {
		controllerOrder= recieveControllerDecision();
    302a:	0e 94 95 12 	call	0x252a	; 0x252a <recieveControllerDecision>
    302e:	8a 83       	std	Y+2, r24	; 0x02

		switch (controllerOrder)
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	3e 87       	std	Y+14, r19	; 0x0e
    3038:	2d 87       	std	Y+13, r18	; 0x0d
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	84 34       	cpi	r24, 0x44	; 68
    3040:	91 05       	cpc	r25, r1
    3042:	09 f4       	brne	.+2      	; 0x3046 <main+0x3e>
    3044:	3f c0       	rjmp	.+126    	; 0x30c4 <main+0xbc>
    3046:	2d 85       	ldd	r18, Y+13	; 0x0d
    3048:	3e 85       	ldd	r19, Y+14	; 0x0e
    304a:	25 34       	cpi	r18, 0x45	; 69
    304c:	31 05       	cpc	r19, r1
    304e:	84 f4       	brge	.+32     	; 0x3070 <main+0x68>
    3050:	8d 85       	ldd	r24, Y+13	; 0x0d
    3052:	9e 85       	ldd	r25, Y+14	; 0x0e
    3054:	82 34       	cpi	r24, 0x42	; 66
    3056:	91 05       	cpc	r25, r1
    3058:	49 f1       	breq	.+82     	; 0x30ac <main+0xa4>
    305a:	2d 85       	ldd	r18, Y+13	; 0x0d
    305c:	3e 85       	ldd	r19, Y+14	; 0x0e
    305e:	23 34       	cpi	r18, 0x43	; 67
    3060:	31 05       	cpc	r19, r1
    3062:	54 f5       	brge	.+84     	; 0x30b8 <main+0xb0>
    3064:	8d 85       	ldd	r24, Y+13	; 0x0d
    3066:	9e 85       	ldd	r25, Y+14	; 0x0e
    3068:	81 34       	cpi	r24, 0x41	; 65
    306a:	91 05       	cpc	r25, r1
    306c:	c9 f0       	breq	.+50     	; 0x30a0 <main+0x98>
    306e:	dd cf       	rjmp	.-70     	; 0x302a <main+0x22>
    3070:	2d 85       	ldd	r18, Y+13	; 0x0d
    3072:	3e 85       	ldd	r19, Y+14	; 0x0e
    3074:	26 34       	cpi	r18, 0x46	; 70
    3076:	31 05       	cpc	r19, r1
    3078:	09 f4       	brne	.+2      	; 0x307c <main+0x74>
    307a:	43 c0       	rjmp	.+134    	; 0x3102 <main+0xfa>
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	86 34       	cpi	r24, 0x46	; 70
    3082:	91 05       	cpc	r25, r1
    3084:	c4 f1       	brlt	.+112    	; 0x30f6 <main+0xee>
    3086:	2d 85       	ldd	r18, Y+13	; 0x0d
    3088:	3e 85       	ldd	r19, Y+14	; 0x0e
    308a:	29 34       	cpi	r18, 0x49	; 73
    308c:	31 05       	cpc	r19, r1
    308e:	09 f4       	brne	.+2      	; 0x3092 <main+0x8a>
    3090:	5b c0       	rjmp	.+182    	; 0x3148 <main+0x140>
    3092:	8d 85       	ldd	r24, Y+13	; 0x0d
    3094:	9e 85       	ldd	r25, Y+14	; 0x0e
    3096:	89 35       	cpi	r24, 0x59	; 89
    3098:	91 05       	cpc	r25, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <main+0x96>
    309c:	65 c0       	rjmp	.+202    	; 0x3168 <main+0x160>
    309e:	c5 cf       	rjmp	.-118    	; 0x302a <main+0x22>
		{
		case DISPLAY_PASSWORD_FORMAT_ERROR:
			displayPasswordFormatError();
    30a0:	0e 94 a2 12 	call	0x2544	; 0x2544 <displayPasswordFormatError>
			sendHMIStatus(HMI_WAITING);
    30a4:	8e e4       	ldi	r24, 0x4E	; 78
    30a6:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    30aa:	bf cf       	rjmp	.-130    	; 0x302a <main+0x22>

		break;

		case DISPLAY_PASSWORD_NOT_MATCH_ERROR:
			displayPasswordCompareError();
    30ac:	0e 94 41 13 	call	0x2682	; 0x2682 <displayPasswordCompareError>
			sendHMIStatus(HMI_WAITING);
    30b0:	8e e4       	ldi	r24, 0x4E	; 78
    30b2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    30b6:	b9 cf       	rjmp	.-142    	; 0x302a <main+0x22>

		break;

		case DISPLAY_PASSWORD_Changed:
			displayPasswordChanged();
    30b8:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <displayPasswordChanged>
			sendHMIStatus(HMI_WAITING);
    30bc:	8e e4       	ldi	r24, 0x4E	; 78
    30be:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    30c2:	b3 cf       	rjmp	.-154    	; 0x302a <main+0x22>

		break;

		case DISPLAY_GET_NEW_PASSWORD_SEQUENCE:
			getNewPassword(password,reentertedPAssword,PASSWORD_LENGTH);
    30c4:	ce 01       	movw	r24, r28
    30c6:	03 96       	adiw	r24, 0x03	; 3
    30c8:	9e 01       	movw	r18, r28
    30ca:	28 5f       	subi	r18, 0xF8	; 248
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	b9 01       	movw	r22, r18
    30d0:	45 e0       	ldi	r20, 0x05	; 5
    30d2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <getNewPassword>
			waitForController();
    30d6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <waitForController>
			sendPasswordToController(password,PASSWORD_LENGTH);
    30da:	ce 01       	movw	r24, r28
    30dc:	03 96       	adiw	r24, 0x03	; 3
    30de:	65 e0       	ldi	r22, 0x05	; 5
    30e0:	0e 94 50 12 	call	0x24a0	; 0x24a0 <sendPasswordToController>
			sendPasswordToController(reentertedPAssword,PASSWORD_LENGTH);
    30e4:	ce 01       	movw	r24, r28
    30e6:	08 96       	adiw	r24, 0x08	; 8
    30e8:	65 e0       	ldi	r22, 0x05	; 5
    30ea:	0e 94 50 12 	call	0x24a0	; 0x24a0 <sendPasswordToController>
			sendHMIStatus(HMI_WAITING);
    30ee:	8e e4       	ldi	r24, 0x4E	; 78
    30f0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    30f4:	9a cf       	rjmp	.-204    	; 0x302a <main+0x22>

		break;

		case DISPLAY_DOOR_OPEN_SEQUENCE:
			displayDoorState();
    30f6:	0e 94 67 14 	call	0x28ce	; 0x28ce <displayDoorState>
			sendHMIStatus(HMI_WAITING);
    30fa:	8e e4       	ldi	r24, 0x4E	; 78
    30fc:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    3100:	94 cf       	rjmp	.-216    	; 0x302a <main+0x22>

		break;

		case DISPLAY_OPTION_MENU:
			displaySystemOptions();
    3102:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <displaySystemOptions>
			userRequest='0';
    3106:	80 e3       	ldi	r24, 0x30	; 48
    3108:	89 83       	std	Y+1, r24	; 0x01
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <main+0x10a>
			while(!(userRequest=='*' || userRequest=='#')){userRequest=getUserRequest();}
    310c:	0e 94 03 16 	call	0x2c06	; 0x2c06 <getUserRequest>
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	8a 32       	cpi	r24, 0x2A	; 42
    3116:	19 f0       	breq	.+6      	; 0x311e <main+0x116>
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	83 32       	cpi	r24, 0x23	; 35
    311c:	b9 f7       	brne	.-18     	; 0x310c <main+0x104>
			if(userRequest=='*')
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8a 32       	cpi	r24, 0x2A	; 42
    3122:	31 f4       	brne	.+12     	; 0x3130 <main+0x128>
			{
				waitForController();
    3124:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <waitForController>
				sendRequestToController(Open_DOOR_REQ_ID);
    3128:	87 e4       	ldi	r24, 0x47	; 71
    312a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <sendRequestToController>
    312e:	08 c0       	rjmp	.+16     	; 0x3140 <main+0x138>

			}

			else if(userRequest=='#')
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	83 32       	cpi	r24, 0x23	; 35
    3134:	29 f4       	brne	.+10     	; 0x3140 <main+0x138>
		   {
				waitForController();
    3136:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <waitForController>
				sendRequestToController(CHANGE_PASSWORD_REQ_ID);
    313a:	88 e4       	ldi	r24, 0x48	; 72
    313c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <sendRequestToController>
		   }
			else
			{

			}
			sendHMIStatus(HMI_WAITING);
    3140:	8e e4       	ldi	r24, 0x4E	; 78
    3142:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    3146:	71 cf       	rjmp	.-286    	; 0x302a <main+0x22>
		break;

		case GET_ENTER_PASSWORD :
			getEnterPassword(password,PASSWORD_LENGTH);
    3148:	ce 01       	movw	r24, r28
    314a:	03 96       	adiw	r24, 0x03	; 3
    314c:	65 e0       	ldi	r22, 0x05	; 5
    314e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <getEnterPassword>
			waitForController();
    3152:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <waitForController>
			sendPasswordToController(password,PASSWORD_LENGTH);
    3156:	ce 01       	movw	r24, r28
    3158:	03 96       	adiw	r24, 0x03	; 3
    315a:	65 e0       	ldi	r22, 0x05	; 5
    315c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <sendPasswordToController>
			sendHMIStatus(HMI_WAITING);
    3160:	8e e4       	ldi	r24, 0x4E	; 78
    3162:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    3166:	61 cf       	rjmp	.-318    	; 0x302a <main+0x22>
		break;

		case DISPLAY_SECURITY_ALARM :
			 displaySecurityAlarm();
    3168:	0e 94 6d 17 	call	0x2eda	; 0x2eda <displaySecurityAlarm>
			 sendHMIStatus(HMI_WAITING);
    316c:	8e e4       	ldi	r24, 0x4E	; 78
    316e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <sendHMIStatus>
    3172:	5b cf       	rjmp	.-330    	; 0x302a <main+0x22>

00003174 <__udivmodsi4>:
    3174:	a1 e2       	ldi	r26, 0x21	; 33
    3176:	1a 2e       	mov	r1, r26
    3178:	aa 1b       	sub	r26, r26
    317a:	bb 1b       	sub	r27, r27
    317c:	fd 01       	movw	r30, r26
    317e:	0d c0       	rjmp	.+26     	; 0x319a <__udivmodsi4_ep>

00003180 <__udivmodsi4_loop>:
    3180:	aa 1f       	adc	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	ee 1f       	adc	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	a2 17       	cp	r26, r18
    318a:	b3 07       	cpc	r27, r19
    318c:	e4 07       	cpc	r30, r20
    318e:	f5 07       	cpc	r31, r21
    3190:	20 f0       	brcs	.+8      	; 0x319a <__udivmodsi4_ep>
    3192:	a2 1b       	sub	r26, r18
    3194:	b3 0b       	sbc	r27, r19
    3196:	e4 0b       	sbc	r30, r20
    3198:	f5 0b       	sbc	r31, r21

0000319a <__udivmodsi4_ep>:
    319a:	66 1f       	adc	r22, r22
    319c:	77 1f       	adc	r23, r23
    319e:	88 1f       	adc	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	1a 94       	dec	r1
    31a4:	69 f7       	brne	.-38     	; 0x3180 <__udivmodsi4_loop>
    31a6:	60 95       	com	r22
    31a8:	70 95       	com	r23
    31aa:	80 95       	com	r24
    31ac:	90 95       	com	r25
    31ae:	9b 01       	movw	r18, r22
    31b0:	ac 01       	movw	r20, r24
    31b2:	bd 01       	movw	r22, r26
    31b4:	cf 01       	movw	r24, r30
    31b6:	08 95       	ret

000031b8 <__prologue_saves__>:
    31b8:	2f 92       	push	r2
    31ba:	3f 92       	push	r3
    31bc:	4f 92       	push	r4
    31be:	5f 92       	push	r5
    31c0:	6f 92       	push	r6
    31c2:	7f 92       	push	r7
    31c4:	8f 92       	push	r8
    31c6:	9f 92       	push	r9
    31c8:	af 92       	push	r10
    31ca:	bf 92       	push	r11
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	ca 1b       	sub	r28, r26
    31e2:	db 0b       	sbc	r29, r27
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	09 94       	ijmp

000031f0 <__epilogue_restores__>:
    31f0:	2a 88       	ldd	r2, Y+18	; 0x12
    31f2:	39 88       	ldd	r3, Y+17	; 0x11
    31f4:	48 88       	ldd	r4, Y+16	; 0x10
    31f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    31fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3200:	aa 84       	ldd	r10, Y+10	; 0x0a
    3202:	b9 84       	ldd	r11, Y+9	; 0x09
    3204:	c8 84       	ldd	r12, Y+8	; 0x08
    3206:	df 80       	ldd	r13, Y+7	; 0x07
    3208:	ee 80       	ldd	r14, Y+6	; 0x06
    320a:	fd 80       	ldd	r15, Y+5	; 0x05
    320c:	0c 81       	ldd	r16, Y+4	; 0x04
    320e:	1b 81       	ldd	r17, Y+3	; 0x03
    3210:	aa 81       	ldd	r26, Y+2	; 0x02
    3212:	b9 81       	ldd	r27, Y+1	; 0x01
    3214:	ce 0f       	add	r28, r30
    3216:	d1 1d       	adc	r29, r1
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	ed 01       	movw	r28, r26
    3224:	08 95       	ret

00003226 <itoa>:
    3226:	fb 01       	movw	r30, r22
    3228:	9f 01       	movw	r18, r30
    322a:	e8 94       	clt
    322c:	42 30       	cpi	r20, 0x02	; 2
    322e:	c4 f0       	brlt	.+48     	; 0x3260 <itoa+0x3a>
    3230:	45 32       	cpi	r20, 0x25	; 37
    3232:	b4 f4       	brge	.+44     	; 0x3260 <itoa+0x3a>
    3234:	4a 30       	cpi	r20, 0x0A	; 10
    3236:	29 f4       	brne	.+10     	; 0x3242 <itoa+0x1c>
    3238:	97 fb       	bst	r25, 7
    323a:	1e f4       	brtc	.+6      	; 0x3242 <itoa+0x1c>
    323c:	90 95       	com	r25
    323e:	81 95       	neg	r24
    3240:	9f 4f       	sbci	r25, 0xFF	; 255
    3242:	64 2f       	mov	r22, r20
    3244:	77 27       	eor	r23, r23
    3246:	0e 94 44 19 	call	0x3288	; 0x3288 <__udivmodhi4>
    324a:	80 5d       	subi	r24, 0xD0	; 208
    324c:	8a 33       	cpi	r24, 0x3A	; 58
    324e:	0c f0       	brlt	.+2      	; 0x3252 <itoa+0x2c>
    3250:	89 5d       	subi	r24, 0xD9	; 217
    3252:	81 93       	st	Z+, r24
    3254:	cb 01       	movw	r24, r22
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	a1 f7       	brne	.-24     	; 0x3242 <itoa+0x1c>
    325a:	16 f4       	brtc	.+4      	; 0x3260 <itoa+0x3a>
    325c:	5d e2       	ldi	r21, 0x2D	; 45
    325e:	51 93       	st	Z+, r21
    3260:	10 82       	st	Z, r1
    3262:	c9 01       	movw	r24, r18
    3264:	0c 94 34 19 	jmp	0x3268	; 0x3268 <strrev>

00003268 <strrev>:
    3268:	dc 01       	movw	r26, r24
    326a:	fc 01       	movw	r30, r24
    326c:	67 2f       	mov	r22, r23
    326e:	71 91       	ld	r23, Z+
    3270:	77 23       	and	r23, r23
    3272:	e1 f7       	brne	.-8      	; 0x326c <strrev+0x4>
    3274:	32 97       	sbiw	r30, 0x02	; 2
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <strrev+0x18>
    3278:	7c 91       	ld	r23, X
    327a:	6d 93       	st	X+, r22
    327c:	70 83       	st	Z, r23
    327e:	62 91       	ld	r22, -Z
    3280:	ae 17       	cp	r26, r30
    3282:	bf 07       	cpc	r27, r31
    3284:	c8 f3       	brcs	.-14     	; 0x3278 <strrev+0x10>
    3286:	08 95       	ret

00003288 <__udivmodhi4>:
    3288:	aa 1b       	sub	r26, r26
    328a:	bb 1b       	sub	r27, r27
    328c:	51 e1       	ldi	r21, 0x11	; 17
    328e:	07 c0       	rjmp	.+14     	; 0x329e <__udivmodhi4_ep>

00003290 <__udivmodhi4_loop>:
    3290:	aa 1f       	adc	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	a6 17       	cp	r26, r22
    3296:	b7 07       	cpc	r27, r23
    3298:	10 f0       	brcs	.+4      	; 0x329e <__udivmodhi4_ep>
    329a:	a6 1b       	sub	r26, r22
    329c:	b7 0b       	sbc	r27, r23

0000329e <__udivmodhi4_ep>:
    329e:	88 1f       	adc	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	5a 95       	dec	r21
    32a4:	a9 f7       	brne	.-22     	; 0x3290 <__udivmodhi4_loop>
    32a6:	80 95       	com	r24
    32a8:	90 95       	com	r25
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	08 95       	ret

000032b0 <_exit>:
    32b0:	f8 94       	cli

000032b2 <__stop_program>:
    32b2:	ff cf       	rjmp	.-2      	; 0x32b2 <__stop_program>
